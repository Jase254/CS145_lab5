
Lab5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000011d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000008a  00800060  000011d2  00001266  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  008000ea  008000ea  000012f0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000134c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00001388  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001230  00000000  00000000  00001458  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008a8  00000000  00000000  00002688  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000008d1  00000000  00000000  00002f30  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000324  00000000  00000000  00003804  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043f  00000000  00000000  00003b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d76  00000000  00000000  00003f67  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00004cdd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3b 00 	jmp	0x76	; 0x76 <__ctors_end>
       4:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       8:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
       c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      10:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      14:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      18:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      1c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      20:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      24:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      28:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      2c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      30:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      34:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      38:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      3c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      40:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      44:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      48:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      4c:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      50:	0c 94 58 00 	jmp	0xb0	; 0xb0 <__bad_interrupt>
      54:	8a 02       	muls	r24, r26
      56:	94 02       	muls	r25, r20
      58:	94 02       	muls	r25, r20
      5a:	94 02       	muls	r25, r20
      5c:	8a 02       	muls	r24, r26
      5e:	94 02       	muls	r25, r20
      60:	94 02       	muls	r25, r20
      62:	94 02       	muls	r25, r20
      64:	8a 02       	muls	r24, r26
      66:	94 02       	muls	r25, r20
      68:	94 02       	muls	r25, r20
      6a:	94 02       	muls	r25, r20
      6c:	8a 02       	muls	r24, r26
      6e:	8a 02       	muls	r24, r26
      70:	94 02       	muls	r25, r20
      72:	c9 02       	muls	r28, r25
      74:	8a 02       	muls	r24, r26

00000076 <__ctors_end>:
      76:	11 24       	eor	r1, r1
      78:	1f be       	out	0x3f, r1	; 63
      7a:	cf e5       	ldi	r28, 0x5F	; 95
      7c:	d8 e0       	ldi	r29, 0x08	; 8
      7e:	de bf       	out	0x3e, r29	; 62
      80:	cd bf       	out	0x3d, r28	; 61

00000082 <__do_copy_data>:
      82:	10 e0       	ldi	r17, 0x00	; 0
      84:	a0 e6       	ldi	r26, 0x60	; 96
      86:	b0 e0       	ldi	r27, 0x00	; 0
      88:	e2 ed       	ldi	r30, 0xD2	; 210
      8a:	f1 e1       	ldi	r31, 0x11	; 17
      8c:	02 c0       	rjmp	.+4      	; 0x92 <__do_copy_data+0x10>
      8e:	05 90       	lpm	r0, Z+
      90:	0d 92       	st	X+, r0
      92:	aa 3e       	cpi	r26, 0xEA	; 234
      94:	b1 07       	cpc	r27, r17
      96:	d9 f7       	brne	.-10     	; 0x8e <__do_copy_data+0xc>

00000098 <__do_clear_bss>:
      98:	21 e0       	ldi	r18, 0x01	; 1
      9a:	aa ee       	ldi	r26, 0xEA	; 234
      9c:	b0 e0       	ldi	r27, 0x00	; 0
      9e:	01 c0       	rjmp	.+2      	; 0xa2 <.do_clear_bss_start>

000000a0 <.do_clear_bss_loop>:
      a0:	1d 92       	st	X+, r1

000000a2 <.do_clear_bss_start>:
      a2:	ac 30       	cpi	r26, 0x0C	; 12
      a4:	b2 07       	cpc	r27, r18
      a6:	e1 f7       	brne	.-8      	; 0xa0 <.do_clear_bss_loop>
      a8:	0e 94 64 03 	call	0x6c8	; 0x6c8 <main>
      ac:	0c 94 e7 08 	jmp	0x11ce	; 0x11ce <_exit>

000000b0 <__bad_interrupt>:
      b0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b4 <avr_wait>:
	}
}

void
avr_wait(unsigned short msec)
{
      b4:	9c 01       	movw	r18, r24
	TCCR0 = 3;
      b6:	83 e0       	ldi	r24, 0x03	; 3
      b8:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
      ba:	83 ef       	ldi	r24, 0xF3	; 243

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      bc:	08 c0       	rjmp	.+16     	; 0xce <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
      be:	82 bf       	out	0x32, r24	; 50
		SET_BIT(TIFR, TOV0);
      c0:	98 b7       	in	r25, 0x38	; 56
      c2:	91 60       	ori	r25, 0x01	; 1
      c4:	98 bf       	out	0x38, r25	; 56
		WDR();
      c6:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      c8:	08 b6       	in	r0, 0x38	; 56
      ca:	00 fe       	sbrs	r0, 0
      cc:	fd cf       	rjmp	.-6      	; 0xc8 <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      ce:	21 50       	subi	r18, 0x01	; 1
      d0:	31 09       	sbc	r19, r1
      d2:	a8 f7       	brcc	.-22     	; 0xbe <avr_wait+0xa>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.0001);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      d4:	13 be       	out	0x33, r1	; 51
      d6:	08 95       	ret

000000d8 <PlayNote>:
{
	WDTCR = 15;
}

void 
PlayNote(float freq, unsigned int duration){
      d8:	8f 92       	push	r8
      da:	9f 92       	push	r9
      dc:	af 92       	push	r10
      de:	bf 92       	push	r11
      e0:	cf 92       	push	r12
      e2:	df 92       	push	r13
      e4:	ef 92       	push	r14
      e6:	ff 92       	push	r15
      e8:	cf 93       	push	r28
      ea:	df 93       	push	r29
      ec:	ea 01       	movw	r28, r20
	float wav = (1/freq) * 1000;
      ee:	9b 01       	movw	r18, r22
      f0:	ac 01       	movw	r20, r24
      f2:	60 e0       	ldi	r22, 0x00	; 0
      f4:	70 e0       	ldi	r23, 0x00	; 0
      f6:	80 e8       	ldi	r24, 0x80	; 128
      f8:	9f e3       	ldi	r25, 0x3F	; 63
      fa:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__divsf3>
      fe:	20 e0       	ldi	r18, 0x00	; 0
     100:	30 e0       	ldi	r19, 0x00	; 0
     102:	4a e7       	ldi	r20, 0x7A	; 122
     104:	54 e4       	ldi	r21, 0x44	; 68
     106:	0e 94 8a 05 	call	0xb14	; 0xb14 <__mulsf3>
     10a:	6b 01       	movw	r12, r22
     10c:	7c 01       	movw	r14, r24
	unsigned int cycles = duration/wav;
     10e:	be 01       	movw	r22, r28
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <__floatunsisf>
     118:	a7 01       	movw	r20, r14
     11a:	96 01       	movw	r18, r12
     11c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__divsf3>
     120:	0e 94 cd 04 	call	0x99a	; 0x99a <__fixunssfsi>
     124:	eb 01       	movw	r28, r22
	float period = (wav / 2) * 100;
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 e0       	ldi	r20, 0x00	; 0
     12c:	5f e3       	ldi	r21, 0x3F	; 63
     12e:	c7 01       	movw	r24, r14
     130:	b6 01       	movw	r22, r12
     132:	0e 94 8a 05 	call	0xb14	; 0xb14 <__mulsf3>
     136:	20 e0       	ldi	r18, 0x00	; 0
     138:	30 e0       	ldi	r19, 0x00	; 0
     13a:	48 ec       	ldi	r20, 0xC8	; 200
     13c:	52 e4       	ldi	r21, 0x42	; 66
     13e:	0e 94 8a 05 	call	0xb14	; 0xb14 <__mulsf3>
     142:	4b 01       	movw	r8, r22
     144:	5c 01       	movw	r10, r24
	
	while(cycles > 0){
     146:	20 97       	sbiw	r28, 0x00	; 0
     148:	81 f0       	breq	.+32     	; 0x16a <PlayNote+0x92>
		PORTA |= (1<<PA1);
     14a:	d9 9a       	sbi	0x1b, 1	; 27
		avr_wait(period);
     14c:	c5 01       	movw	r24, r10
     14e:	b4 01       	movw	r22, r8
     150:	0e 94 cd 04 	call	0x99a	; 0x99a <__fixunssfsi>
     154:	6b 01       	movw	r12, r22
     156:	7c 01       	movw	r14, r24
     158:	cb 01       	movw	r24, r22
     15a:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
		PORTA &= ~(1<<PA1);
     15e:	d9 98       	cbi	0x1b, 1	; 27
		avr_wait(period);
     160:	c6 01       	movw	r24, r12
     162:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
		cycles--;
     166:	21 97       	sbiw	r28, 0x01	; 1
PlayNote(float freq, unsigned int duration){
	float wav = (1/freq) * 1000;
	unsigned int cycles = duration/wav;
	float period = (wav / 2) * 100;
	
	while(cycles > 0){
     168:	81 f7       	brne	.-32     	; 0x14a <PlayNote+0x72>
		avr_wait(period);
		PORTA &= ~(1<<PA1);
		avr_wait(period);
		cycles--;
	}
}
     16a:	df 91       	pop	r29
     16c:	cf 91       	pop	r28
     16e:	ff 90       	pop	r15
     170:	ef 90       	pop	r14
     172:	df 90       	pop	r13
     174:	cf 90       	pop	r12
     176:	bf 90       	pop	r11
     178:	af 90       	pop	r10
     17a:	9f 90       	pop	r9
     17c:	8f 90       	pop	r8
     17e:	08 95       	ret

00000180 <check_alarm>:
		}
	}
}

//Check alarms
int check_alarm(struct datetime *dt, struct datetime alarms[], int size){
     180:	0f 93       	push	r16
     182:	1f 93       	push	r17
     184:	cf 93       	push	r28
     186:	df 93       	push	r29
     188:	ec 01       	movw	r28, r24
	int alarm = 0;
	for( int i = 0; i < size; ++i){
     18a:	14 16       	cp	r1, r20
     18c:	15 06       	cpc	r1, r21
     18e:	74 f5       	brge	.+92     	; 0x1ec <check_alarm+0x6c>
		if((alarms[i].year == dt->year) &&
     190:	08 81       	ld	r16, Y
     192:	19 81       	ldd	r17, Y+1	; 0x01
     194:	fb 01       	movw	r30, r22
     196:	ca 01       	movw	r24, r20
     198:	88 0f       	add	r24, r24
     19a:	99 1f       	adc	r25, r25
     19c:	88 0f       	add	r24, r24
     19e:	99 1f       	adc	r25, r25
     1a0:	88 0f       	add	r24, r24
     1a2:	99 1f       	adc	r25, r25
     1a4:	48 0f       	add	r20, r24
     1a6:	59 1f       	adc	r21, r25
     1a8:	64 0f       	add	r22, r20
     1aa:	75 1f       	adc	r23, r21
     1ac:	20 81       	ld	r18, Z
     1ae:	31 81       	ldd	r19, Z+1	; 0x01
     1b0:	20 17       	cp	r18, r16
     1b2:	31 07       	cpc	r19, r17
     1b4:	a1 f4       	brne	.+40     	; 0x1de <check_alarm+0x5e>
     1b6:	22 81       	ldd	r18, Z+2	; 0x02
     1b8:	9a 81       	ldd	r25, Y+2	; 0x02
     1ba:	29 13       	cpse	r18, r25
     1bc:	10 c0       	rjmp	.+32     	; 0x1de <check_alarm+0x5e>
		(alarms[i].month == dt->month) &&
     1be:	93 81       	ldd	r25, Z+3	; 0x03
     1c0:	8b 81       	ldd	r24, Y+3	; 0x03
     1c2:	98 13       	cpse	r25, r24
     1c4:	0c c0       	rjmp	.+24     	; 0x1de <check_alarm+0x5e>
		(alarms[i].day == dt->day) &&
     1c6:	94 81       	ldd	r25, Z+4	; 0x04
     1c8:	8c 81       	ldd	r24, Y+4	; 0x04
     1ca:	98 13       	cpse	r25, r24
     1cc:	08 c0       	rjmp	.+16     	; 0x1de <check_alarm+0x5e>
		(alarms[i].hour == dt->hour) &&
     1ce:	95 81       	ldd	r25, Z+5	; 0x05
     1d0:	8d 81       	ldd	r24, Y+5	; 0x05
     1d2:	98 13       	cpse	r25, r24
     1d4:	04 c0       	rjmp	.+8      	; 0x1de <check_alarm+0x5e>
		(alarms[i].minute == dt->minute) && 
     1d6:	96 81       	ldd	r25, Z+6	; 0x06
     1d8:	8e 81       	ldd	r24, Y+6	; 0x06
     1da:	98 17       	cp	r25, r24
     1dc:	51 f0       	breq	.+20     	; 0x1f2 <check_alarm+0x72>
     1de:	39 96       	adiw	r30, 0x09	; 9
}

//Check alarms
int check_alarm(struct datetime *dt, struct datetime alarms[], int size){
	int alarm = 0;
	for( int i = 0; i < size; ++i){
     1e0:	e6 17       	cp	r30, r22
     1e2:	f7 07       	cpc	r31, r23
     1e4:	19 f7       	brne	.-58     	; 0x1ac <check_alarm+0x2c>
	}
}

//Check alarms
int check_alarm(struct datetime *dt, struct datetime alarms[], int size){
	int alarm = 0;
     1e6:	80 e0       	ldi	r24, 0x00	; 0
     1e8:	90 e0       	ldi	r25, 0x00	; 0
     1ea:	05 c0       	rjmp	.+10     	; 0x1f6 <check_alarm+0x76>
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	90 e0       	ldi	r25, 0x00	; 0
     1f0:	02 c0       	rjmp	.+4      	; 0x1f6 <check_alarm+0x76>
		(alarms[i].month == dt->month) &&
		(alarms[i].day == dt->day) &&
		(alarms[i].hour == dt->hour) &&
		(alarms[i].minute == dt->minute) && 
		(alarms[i].second == dt->second)){
			alarm = 1;
     1f2:	81 e0       	ldi	r24, 0x01	; 1
     1f4:	90 e0       	ldi	r25, 0x00	; 0
			break;
	}
	}
	return alarm;
}
     1f6:	df 91       	pop	r29
     1f8:	cf 91       	pop	r28
     1fa:	1f 91       	pop	r17
     1fc:	0f 91       	pop	r16
     1fe:	08 95       	ret

00000200 <display_time>:
	
// Display the time to lcd
void display_time(struct datetime *dt){
     200:	cf 93       	push	r28
     202:	df 93       	push	r29
     204:	ec 01       	movw	r28, r24
	sprintf(out, "%d/%d/%d", dt->month, dt->day, dt->year);
     206:	89 81       	ldd	r24, Y+1	; 0x01
     208:	8f 93       	push	r24
     20a:	88 81       	ld	r24, Y
     20c:	8f 93       	push	r24
     20e:	8b 81       	ldd	r24, Y+3	; 0x03
     210:	1f 92       	push	r1
     212:	8f 93       	push	r24
     214:	8a 81       	ldd	r24, Y+2	; 0x02
     216:	1f 92       	push	r1
     218:	8f 93       	push	r24
     21a:	89 e6       	ldi	r24, 0x69	; 105
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	9f 93       	push	r25
     220:	8f 93       	push	r24
     222:	8a ee       	ldi	r24, 0xEA	; 234
     224:	90 e0       	ldi	r25, 0x00	; 0
     226:	9f 93       	push	r25
     228:	8f 93       	push	r24
     22a:	0e 94 fd 05 	call	0xbfa	; 0xbfa <sprintf>
	lcd_clr();
     22e:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
	lcd_pos(0,1);
     232:	61 e0       	ldi	r22, 0x01	; 1
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	lcd_puts2(out);
     23a:	8a ee       	ldi	r24, 0xEA	; 234
     23c:	90 e0       	ldi	r25, 0x00	; 0
     23e:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
	lcd_pos(1,1);
     242:	61 e0       	ldi	r22, 0x01	; 1
     244:	81 e0       	ldi	r24, 0x01	; 1
     246:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	// If military time, display without special formatting (default)
	if(dt->military){
     24a:	8d b7       	in	r24, 0x3d	; 61
     24c:	9e b7       	in	r25, 0x3e	; 62
     24e:	0a 96       	adiw	r24, 0x0a	; 10
     250:	0f b6       	in	r0, 0x3f	; 63
     252:	f8 94       	cli
     254:	9e bf       	out	0x3e, r25	; 62
     256:	0f be       	out	0x3f, r0	; 63
     258:	8d bf       	out	0x3d, r24	; 61
     25a:	88 85       	ldd	r24, Y+8	; 0x08
     25c:	88 23       	and	r24, r24
     25e:	f9 f0       	breq	.+62     	; 0x29e <display_time+0x9e>
		sprintf(out, "%02d:%02d:%02d:%d", dt->hour, dt->minute, dt->second, dt->subsecond);
     260:	8f 81       	ldd	r24, Y+7	; 0x07
     262:	1f 92       	push	r1
     264:	8f 93       	push	r24
     266:	8e 81       	ldd	r24, Y+6	; 0x06
     268:	1f 92       	push	r1
     26a:	8f 93       	push	r24
     26c:	8d 81       	ldd	r24, Y+5	; 0x05
     26e:	1f 92       	push	r1
     270:	8f 93       	push	r24
     272:	8c 81       	ldd	r24, Y+4	; 0x04
     274:	1f 92       	push	r1
     276:	8f 93       	push	r24
     278:	82 e7       	ldi	r24, 0x72	; 114
     27a:	90 e0       	ldi	r25, 0x00	; 0
     27c:	9f 93       	push	r25
     27e:	8f 93       	push	r24
     280:	8a ee       	ldi	r24, 0xEA	; 234
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9f 93       	push	r25
     286:	8f 93       	push	r24
     288:	0e 94 fd 05 	call	0xbfa	; 0xbfa <sprintf>
     28c:	8d b7       	in	r24, 0x3d	; 61
     28e:	9e b7       	in	r25, 0x3e	; 62
     290:	0c 96       	adiw	r24, 0x0c	; 12
     292:	0f b6       	in	r0, 0x3f	; 63
     294:	f8 94       	cli
     296:	9e bf       	out	0x3e, r25	; 62
     298:	0f be       	out	0x3f, r0	; 63
     29a:	8d bf       	out	0x3d, r24	; 61
     29c:	6d c0       	rjmp	.+218    	; 0x378 <display_time+0x178>
	}
	else{
		// Otherwise some special cases are in play for AM/PM
		if(dt->hour > 12){
     29e:	8c 81       	ldd	r24, Y+4	; 0x04
     2a0:	8d 30       	cpi	r24, 0x0D	; 13
     2a2:	20 f1       	brcs	.+72     	; 0x2ec <display_time+0xec>
			sprintf(out, "%02d:%02d:%02d:%d %s", (dt->hour - 12), dt->minute, dt->second, dt->subsecond, "PM");
     2a4:	24 e8       	ldi	r18, 0x84	; 132
     2a6:	30 e0       	ldi	r19, 0x00	; 0
     2a8:	3f 93       	push	r19
     2aa:	2f 93       	push	r18
     2ac:	9f 81       	ldd	r25, Y+7	; 0x07
     2ae:	1f 92       	push	r1
     2b0:	9f 93       	push	r25
     2b2:	9e 81       	ldd	r25, Y+6	; 0x06
     2b4:	1f 92       	push	r1
     2b6:	9f 93       	push	r25
     2b8:	9d 81       	ldd	r25, Y+5	; 0x05
     2ba:	1f 92       	push	r1
     2bc:	9f 93       	push	r25
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0c 97       	sbiw	r24, 0x0c	; 12
     2c2:	9f 93       	push	r25
     2c4:	8f 93       	push	r24
     2c6:	87 e8       	ldi	r24, 0x87	; 135
     2c8:	90 e0       	ldi	r25, 0x00	; 0
     2ca:	9f 93       	push	r25
     2cc:	8f 93       	push	r24
     2ce:	8a ee       	ldi	r24, 0xEA	; 234
     2d0:	90 e0       	ldi	r25, 0x00	; 0
     2d2:	9f 93       	push	r25
     2d4:	8f 93       	push	r24
     2d6:	0e 94 fd 05 	call	0xbfa	; 0xbfa <sprintf>
     2da:	8d b7       	in	r24, 0x3d	; 61
     2dc:	9e b7       	in	r25, 0x3e	; 62
     2de:	0e 96       	adiw	r24, 0x0e	; 14
     2e0:	0f b6       	in	r0, 0x3f	; 63
     2e2:	f8 94       	cli
     2e4:	9e bf       	out	0x3e, r25	; 62
     2e6:	0f be       	out	0x3f, r0	; 63
     2e8:	8d bf       	out	0x3d, r24	; 61
     2ea:	46 c0       	rjmp	.+140    	; 0x378 <display_time+0x178>
		}
		else if(dt->hour == 0){
     2ec:	81 11       	cpse	r24, r1
     2ee:	23 c0       	rjmp	.+70     	; 0x336 <display_time+0x136>
			sprintf(out, "%02d:%02d:%02d:%02d %s", (dt->hour + 12), dt->minute, dt->second, dt->subsecond, "AM");
     2f0:	8c e9       	ldi	r24, 0x9C	; 156
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	9f 93       	push	r25
     2f6:	8f 93       	push	r24
     2f8:	8f 81       	ldd	r24, Y+7	; 0x07
     2fa:	1f 92       	push	r1
     2fc:	8f 93       	push	r24
     2fe:	8e 81       	ldd	r24, Y+6	; 0x06
     300:	1f 92       	push	r1
     302:	8f 93       	push	r24
     304:	8d 81       	ldd	r24, Y+5	; 0x05
     306:	1f 92       	push	r1
     308:	8f 93       	push	r24
     30a:	1f 92       	push	r1
     30c:	8c e0       	ldi	r24, 0x0C	; 12
     30e:	8f 93       	push	r24
     310:	8f e9       	ldi	r24, 0x9F	; 159
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	9f 93       	push	r25
     316:	8f 93       	push	r24
     318:	8a ee       	ldi	r24, 0xEA	; 234
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	9f 93       	push	r25
     31e:	8f 93       	push	r24
     320:	0e 94 fd 05 	call	0xbfa	; 0xbfa <sprintf>
     324:	8d b7       	in	r24, 0x3d	; 61
     326:	9e b7       	in	r25, 0x3e	; 62
     328:	0e 96       	adiw	r24, 0x0e	; 14
     32a:	0f b6       	in	r0, 0x3f	; 63
     32c:	f8 94       	cli
     32e:	9e bf       	out	0x3e, r25	; 62
     330:	0f be       	out	0x3f, r0	; 63
     332:	8d bf       	out	0x3d, r24	; 61
     334:	21 c0       	rjmp	.+66     	; 0x378 <display_time+0x178>
		}
		else{
			sprintf(out, "%02d:%02d:%02d:%d %s", dt->hour, dt->minute, dt->second, dt->subsecond, "AM");
     336:	2c e9       	ldi	r18, 0x9C	; 156
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	3f 93       	push	r19
     33c:	2f 93       	push	r18
     33e:	9f 81       	ldd	r25, Y+7	; 0x07
     340:	1f 92       	push	r1
     342:	9f 93       	push	r25
     344:	9e 81       	ldd	r25, Y+6	; 0x06
     346:	1f 92       	push	r1
     348:	9f 93       	push	r25
     34a:	9d 81       	ldd	r25, Y+5	; 0x05
     34c:	1f 92       	push	r1
     34e:	9f 93       	push	r25
     350:	1f 92       	push	r1
     352:	8f 93       	push	r24
     354:	87 e8       	ldi	r24, 0x87	; 135
     356:	90 e0       	ldi	r25, 0x00	; 0
     358:	9f 93       	push	r25
     35a:	8f 93       	push	r24
     35c:	8a ee       	ldi	r24, 0xEA	; 234
     35e:	90 e0       	ldi	r25, 0x00	; 0
     360:	9f 93       	push	r25
     362:	8f 93       	push	r24
     364:	0e 94 fd 05 	call	0xbfa	; 0xbfa <sprintf>
     368:	8d b7       	in	r24, 0x3d	; 61
     36a:	9e b7       	in	r25, 0x3e	; 62
     36c:	0e 96       	adiw	r24, 0x0e	; 14
     36e:	0f b6       	in	r0, 0x3f	; 63
     370:	f8 94       	cli
     372:	9e bf       	out	0x3e, r25	; 62
     374:	0f be       	out	0x3f, r0	; 63
     376:	8d bf       	out	0x3d, r24	; 61
		}
	}
	lcd_puts2(out);
     378:	8a ee       	ldi	r24, 0xEA	; 234
     37a:	90 e0       	ldi	r25, 0x00	; 0
     37c:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
}
     380:	df 91       	pop	r29
     382:	cf 91       	pop	r28
     384:	08 95       	ret

00000386 <keep_date>:
	}
}
/************************************************************************/
/* Called by keep time function                                         */
/************************************************************************/
void keep_date(struct datetime *date){
     386:	fc 01       	movw	r30, r24
	date->day++;
     388:	23 81       	ldd	r18, Z+3	; 0x03
     38a:	2f 5f       	subi	r18, 0xFF	; 255
     38c:	23 83       	std	Z+3, r18	; 0x03
	char extra = 0;
	switch(date->month){
     38e:	82 81       	ldd	r24, Z+2	; 0x02
     390:	86 30       	cpi	r24, 0x06	; 6
     392:	f9 f0       	breq	.+62     	; 0x3d2 <keep_date+0x4c>
     394:	28 f4       	brcc	.+10     	; 0x3a0 <keep_date+0x1a>
     396:	82 30       	cpi	r24, 0x02	; 2
     398:	41 f0       	breq	.+16     	; 0x3aa <keep_date+0x24>
     39a:	84 30       	cpi	r24, 0x04	; 4
     39c:	09 f5       	brne	.+66     	; 0x3e0 <keep_date+0x5a>
     39e:	19 c0       	rjmp	.+50     	; 0x3d2 <keep_date+0x4c>
     3a0:	89 30       	cpi	r24, 0x09	; 9
     3a2:	b9 f0       	breq	.+46     	; 0x3d2 <keep_date+0x4c>
     3a4:	8b 30       	cpi	r24, 0x0B	; 11
     3a6:	e1 f4       	brne	.+56     	; 0x3e0 <keep_date+0x5a>
     3a8:	14 c0       	rjmp	.+40     	; 0x3d2 <keep_date+0x4c>
		case 2:
			if((date->year % 4) == 0) extra = 1;
			if(date->day > (28+extra)){
     3aa:	30 e0       	ldi	r19, 0x00	; 0
     3ac:	40 81       	ld	r20, Z
     3ae:	51 81       	ldd	r21, Z+1	; 0x01
     3b0:	43 70       	andi	r20, 0x03	; 3
     3b2:	55 27       	eor	r21, r21
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	45 2b       	or	r20, r21
     3ba:	11 f0       	breq	.+4      	; 0x3c0 <keep_date+0x3a>
     3bc:	80 e0       	ldi	r24, 0x00	; 0
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	4c 96       	adiw	r24, 0x1c	; 28
     3c2:	82 17       	cp	r24, r18
     3c4:	93 07       	cpc	r25, r19
     3c6:	e4 f4       	brge	.+56     	; 0x400 <__LOCK_REGION_LENGTH__>
				date->month++;
     3c8:	83 e0       	ldi	r24, 0x03	; 3
     3ca:	82 83       	std	Z+2, r24	; 0x02
				date->day = 1;
     3cc:	81 e0       	ldi	r24, 0x01	; 1
     3ce:	83 83       	std	Z+3, r24	; 0x03
     3d0:	08 95       	ret
			break;
		case 4:
		case 6:
		case 9:
		case 11:
			if(date->day > 30){
     3d2:	2f 31       	cpi	r18, 0x1F	; 31
     3d4:	a8 f0       	brcs	.+42     	; 0x400 <__LOCK_REGION_LENGTH__>
				date->month++;
     3d6:	8f 5f       	subi	r24, 0xFF	; 255
     3d8:	82 83       	std	Z+2, r24	; 0x02
				date->day = 1;
     3da:	81 e0       	ldi	r24, 0x01	; 1
     3dc:	83 83       	std	Z+3, r24	; 0x03
     3de:	08 95       	ret
			}
			break;
		default:
			if(date->day > 31){
     3e0:	20 32       	cpi	r18, 0x20	; 32
     3e2:	70 f0       	brcs	.+28     	; 0x400 <__LOCK_REGION_LENGTH__>
				date->day = 1;
     3e4:	91 e0       	ldi	r25, 0x01	; 1
     3e6:	93 83       	std	Z+3, r25	; 0x03
				if(++(date->month)>12){
     3e8:	8f 5f       	subi	r24, 0xFF	; 255
     3ea:	8d 30       	cpi	r24, 0x0D	; 13
     3ec:	10 f4       	brcc	.+4      	; 0x3f2 <keep_date+0x6c>
     3ee:	82 83       	std	Z+2, r24	; 0x02
     3f0:	08 95       	ret
					date->month = 1;
     3f2:	81 e0       	ldi	r24, 0x01	; 1
     3f4:	82 83       	std	Z+2, r24	; 0x02
					++(date->year);
     3f6:	80 81       	ld	r24, Z
     3f8:	91 81       	ldd	r25, Z+1	; 0x01
     3fa:	01 96       	adiw	r24, 0x01	; 1
     3fc:	91 83       	std	Z+1, r25	; 0x01
     3fe:	80 83       	st	Z, r24
     400:	08 95       	ret

00000402 <keep_time>:
}

/************************************************************************/
/* Runs within main loop to keep time                                   */
/************************************************************************/
void keep_time(struct datetime *date){
     402:	fc 01       	movw	r30, r24
	if(++(date->subsecond) > 9){
     404:	87 81       	ldd	r24, Z+7	; 0x07
     406:	8f 5f       	subi	r24, 0xFF	; 255
     408:	8a 30       	cpi	r24, 0x0A	; 10
     40a:	10 f4       	brcc	.+4      	; 0x410 <keep_time+0xe>
     40c:	87 83       	std	Z+7, r24	; 0x07
     40e:	08 95       	ret
		date->subsecond = 0;
     410:	17 82       	std	Z+7, r1	; 0x07
		if(++(date->second) > 59){
     412:	86 81       	ldd	r24, Z+6	; 0x06
     414:	8f 5f       	subi	r24, 0xFF	; 255
     416:	8c 33       	cpi	r24, 0x3C	; 60
     418:	10 f4       	brcc	.+4      	; 0x41e <keep_time+0x1c>
     41a:	86 83       	std	Z+6, r24	; 0x06
     41c:	08 95       	ret
			date->second = 0;
     41e:	16 82       	std	Z+6, r1	; 0x06
			if(++(date->minute) > 59){
     420:	85 81       	ldd	r24, Z+5	; 0x05
     422:	8f 5f       	subi	r24, 0xFF	; 255
     424:	8c 33       	cpi	r24, 0x3C	; 60
     426:	10 f4       	brcc	.+4      	; 0x42c <keep_time+0x2a>
     428:	85 83       	std	Z+5, r24	; 0x05
     42a:	08 95       	ret
				date->minute = 0;
     42c:	15 82       	std	Z+5, r1	; 0x05
				if(++(date->hour) > 23){
     42e:	84 81       	ldd	r24, Z+4	; 0x04
     430:	8f 5f       	subi	r24, 0xFF	; 255
     432:	88 31       	cpi	r24, 0x18	; 24
     434:	10 f4       	brcc	.+4      	; 0x43a <keep_time+0x38>
     436:	84 83       	std	Z+4, r24	; 0x04
     438:	08 95       	ret
     43a:	cf 01       	movw	r24, r30
					date->hour = 0;
     43c:	14 82       	std	Z+4, r1	; 0x04
					keep_date(date);
     43e:	0e 94 c3 01 	call	0x386	; 0x386 <keep_date>
     442:	08 95       	ret

00000444 <is_pressed>:
}

/************************************************************************/
/* Check for if a certain button is pressed                             */
/************************************************************************/
int is_pressed(int row, int col){
     444:	cf 93       	push	r28
     446:	c8 2f       	mov	r28, r24
	//set all rows, cols to n/c
	DDRC=0;
     448:	14 ba       	out	0x14, r1	; 20
	PORTC=0;
     44a:	15 ba       	out	0x15, r1	; 21
	//set col to strong 0
	SET_BIT(DDRC, col+4);
     44c:	44 b3       	in	r20, 0x14	; 20
     44e:	6c 5f       	subi	r22, 0xFC	; 252
     450:	7f 4f       	sbci	r23, 0xFF	; 255
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	9c 01       	movw	r18, r24
     458:	02 c0       	rjmp	.+4      	; 0x45e <is_pressed+0x1a>
     45a:	22 0f       	add	r18, r18
     45c:	33 1f       	adc	r19, r19
     45e:	6a 95       	dec	r22
     460:	e2 f7       	brpl	.-8      	; 0x45a <is_pressed+0x16>
     462:	24 2b       	or	r18, r20
     464:	24 bb       	out	0x14, r18	; 20
	//set row to weak 1
	SET_BIT(PORTC, row);
     466:	25 b3       	in	r18, 0x15	; 21
     468:	0c 2e       	mov	r0, r28
     46a:	02 c0       	rjmp	.+4      	; 0x470 <is_pressed+0x2c>
     46c:	88 0f       	add	r24, r24
     46e:	99 1f       	adc	r25, r25
     470:	0a 94       	dec	r0
     472:	e2 f7       	brpl	.-8      	; 0x46c <is_pressed+0x28>
     474:	82 2b       	or	r24, r18
     476:	85 bb       	out	0x15, r24	; 21
	avr_wait(1);
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
	return !GET_BIT(PINC, row);
     480:	23 b3       	in	r18, 0x13	; 19
     482:	30 e0       	ldi	r19, 0x00	; 0
     484:	02 c0       	rjmp	.+4      	; 0x48a <is_pressed+0x46>
     486:	35 95       	asr	r19
     488:	27 95       	ror	r18
     48a:	ca 95       	dec	r28
     48c:	e2 f7       	brpl	.-8      	; 0x486 <is_pressed+0x42>
     48e:	81 e0       	ldi	r24, 0x01	; 1
     490:	90 e0       	ldi	r25, 0x00	; 0
     492:	20 ff       	sbrs	r18, 0
     494:	02 c0       	rjmp	.+4      	; 0x49a <is_pressed+0x56>
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	90 e0       	ldi	r25, 0x00	; 0
}
     49a:	cf 91       	pop	r28
     49c:	08 95       	ret

0000049e <get_key>:

/************************************************************************/
/* Get raw key pressed, different than get_num which does some conversion*/
/* for keypad numbers                                                   */
/************************************************************************/
int get_key(){
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
	int r,c;
	for(r=0;r<4;++r){
     4a6:	00 e0       	ldi	r16, 0x00	; 0
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	18 c0       	rjmp	.+48     	; 0x4dc <get_key+0x3e>
		for(c=0;c<4;++c){
			if(is_pressed(r,c)){
     4ac:	be 01       	movw	r22, r28
     4ae:	c8 01       	movw	r24, r16
     4b0:	0e 94 22 02 	call	0x444	; 0x444 <is_pressed>
     4b4:	00 97       	sbiw	r24, 0x00	; 0
     4b6:	49 f0       	breq	.+18     	; 0x4ca <get_key+0x2c>
				return 1+(r*4)+c;
     4b8:	c8 01       	movw	r24, r16
     4ba:	88 0f       	add	r24, r24
     4bc:	99 1f       	adc	r25, r25
     4be:	88 0f       	add	r24, r24
     4c0:	99 1f       	adc	r25, r25
     4c2:	01 96       	adiw	r24, 0x01	; 1
     4c4:	8c 0f       	add	r24, r28
     4c6:	9d 1f       	adc	r25, r29
     4c8:	0c c0       	rjmp	.+24     	; 0x4e2 <get_key+0x44>
/* for keypad numbers                                                   */
/************************************************************************/
int get_key(){
	int r,c;
	for(r=0;r<4;++r){
		for(c=0;c<4;++c){
     4ca:	21 96       	adiw	r28, 0x01	; 1
     4cc:	c4 30       	cpi	r28, 0x04	; 4
     4ce:	d1 05       	cpc	r29, r1
     4d0:	69 f7       	brne	.-38     	; 0x4ac <get_key+0xe>
/* Get raw key pressed, different than get_num which does some conversion*/
/* for keypad numbers                                                   */
/************************************************************************/
int get_key(){
	int r,c;
	for(r=0;r<4;++r){
     4d2:	0f 5f       	subi	r16, 0xFF	; 255
     4d4:	1f 4f       	sbci	r17, 0xFF	; 255
     4d6:	04 30       	cpi	r16, 0x04	; 4
     4d8:	11 05       	cpc	r17, r1
     4da:	19 f0       	breq	.+6      	; 0x4e2 <get_key+0x44>

/************************************************************************/
/* Get raw key pressed, different than get_num which does some conversion*/
/* for keypad numbers                                                   */
/************************************************************************/
int get_key(){
     4dc:	c0 e0       	ldi	r28, 0x00	; 0
     4de:	d0 e0       	ldi	r29, 0x00	; 0
     4e0:	e5 cf       	rjmp	.-54     	; 0x4ac <get_key+0xe>
				return 1+(r*4)+c;
			}
		}
	}
	return 0;
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	08 95       	ret

000004ec <get_num>:
	avr_wait(2000);
}
/************************************************************************/
/* Gets actual keypad value (numbers 0-9)                               */
/************************************************************************/
int get_num(void){
     4ec:	cf 92       	push	r12
     4ee:	df 92       	push	r13
     4f0:	ef 92       	push	r14
     4f2:	ff 92       	push	r15
     4f4:	0f 93       	push	r16
     4f6:	1f 93       	push	r17
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
	int num = 0;
     4fc:	c0 e0       	ldi	r28, 0x00	; 0
     4fe:	d0 e0       	ldi	r29, 0x00	; 0
			case 13:
			case 16: // do nothing in this case
				break;
			default:
				key = key - ((key-1)/4);
				if(key == 11) key = 0;
     500:	c1 2c       	mov	r12, r1
     502:	d1 2c       	mov	r13, r1
				num = (num * 10) + key;
				sprintf(out, "%d", key);
     504:	0f 2e       	mov	r0, r31
     506:	ff e6       	ldi	r31, 0x6F	; 111
     508:	ef 2e       	mov	r14, r31
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	ff 2e       	mov	r15, r31
     50e:	f0 2d       	mov	r31, r0
     510:	0a ee       	ldi	r16, 0xEA	; 234
     512:	10 e0       	ldi	r17, 0x00	; 0
/* Gets actual keypad value (numbers 0-9)                               */
/************************************************************************/
int get_num(void){
	int num = 0;
	for(;;){
		int key = get_key();
     514:	0e 94 4f 02 	call	0x49e	; 0x49e <get_key>
		switch(key){
     518:	81 31       	cpi	r24, 0x11	; 17
     51a:	91 05       	cpc	r25, r1
     51c:	28 f4       	brcc	.+10     	; 0x528 <get_num+0x3c>
     51e:	fc 01       	movw	r30, r24
     520:	e6 5d       	subi	r30, 0xD6	; 214
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	0c 94 f7 05 	jmp	0xbee	; 0xbee <__tablejump2__>
			case 12: 
			case 13:
			case 16: // do nothing in this case
				break;
			default:
				key = key - ((key-1)/4);
     528:	ac 01       	movw	r20, r24
     52a:	41 50       	subi	r20, 0x01	; 1
     52c:	51 09       	sbc	r21, r1
     52e:	9a 01       	movw	r18, r20
     530:	12 f4       	brpl	.+4      	; 0x536 <get_num+0x4a>
     532:	2d 5f       	subi	r18, 0xFD	; 253
     534:	3f 4f       	sbci	r19, 0xFF	; 255
     536:	35 95       	asr	r19
     538:	27 95       	ror	r18
     53a:	35 95       	asr	r19
     53c:	27 95       	ror	r18
     53e:	82 1b       	sub	r24, r18
     540:	93 0b       	sbc	r25, r19
				if(key == 11) key = 0;
     542:	8b 30       	cpi	r24, 0x0B	; 11
     544:	91 05       	cpc	r25, r1
     546:	11 f4       	brne	.+4      	; 0x54c <get_num+0x60>
     548:	8c 2d       	mov	r24, r12
     54a:	9d 2d       	mov	r25, r13
				num = (num * 10) + key;
     54c:	9e 01       	movw	r18, r28
     54e:	22 0f       	add	r18, r18
     550:	33 1f       	adc	r19, r19
     552:	cc 0f       	add	r28, r28
     554:	dd 1f       	adc	r29, r29
     556:	cc 0f       	add	r28, r28
     558:	dd 1f       	adc	r29, r29
     55a:	cc 0f       	add	r28, r28
     55c:	dd 1f       	adc	r29, r29
     55e:	c2 0f       	add	r28, r18
     560:	d3 1f       	adc	r29, r19
     562:	c8 0f       	add	r28, r24
     564:	d9 1f       	adc	r29, r25
				sprintf(out, "%d", key);
     566:	9f 93       	push	r25
     568:	8f 93       	push	r24
     56a:	ff 92       	push	r15
     56c:	ef 92       	push	r14
     56e:	1f 93       	push	r17
     570:	0f 93       	push	r16
     572:	0e 94 fd 05 	call	0xbfa	; 0xbfa <sprintf>
				lcd_puts2(out);
     576:	c8 01       	movw	r24, r16
     578:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
				avr_wait(2000);
     57c:	80 ed       	ldi	r24, 0xD0	; 208
     57e:	97 e0       	ldi	r25, 0x07	; 7
     580:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
				break;
     584:	0f 90       	pop	r0
     586:	0f 90       	pop	r0
     588:	0f 90       	pop	r0
     58a:	0f 90       	pop	r0
     58c:	0f 90       	pop	r0
     58e:	0f 90       	pop	r0
     590:	c1 cf       	rjmp	.-126    	; 0x514 <get_num+0x28>
		}
	}
}
     592:	ce 01       	movw	r24, r28
     594:	df 91       	pop	r29
     596:	cf 91       	pop	r28
     598:	1f 91       	pop	r17
     59a:	0f 91       	pop	r16
     59c:	ff 90       	pop	r15
     59e:	ef 90       	pop	r14
     5a0:	df 90       	pop	r13
     5a2:	cf 90       	pop	r12
     5a4:	08 95       	ret

000005a6 <set_time>:
}

/************************************************************************/
/* Prompt user to enter in first minute, then hour.                     */
/************************************************************************/
void set_time(struct datetime *dt){
     5a6:	cf 93       	push	r28
     5a8:	df 93       	push	r29
     5aa:	ec 01       	movw	r28, r24
	lcd_clr();
     5ac:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
	lcd_pos(0,1);
     5b0:	61 e0       	ldi	r22, 0x01	; 1
     5b2:	80 e0       	ldi	r24, 0x00	; 0
     5b4:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	strcpy(str, "Minute: ");
     5b8:	89 e0       	ldi	r24, 0x09	; 9
     5ba:	e6 eb       	ldi	r30, 0xB6	; 182
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	ab ef       	ldi	r26, 0xFB	; 251
     5c0:	b0 e0       	ldi	r27, 0x00	; 0
     5c2:	01 90       	ld	r0, Z+
     5c4:	0d 92       	st	X+, r0
     5c6:	8a 95       	dec	r24
     5c8:	e1 f7       	brne	.-8      	; 0x5c2 <set_time+0x1c>
	lcd_puts2(str);
     5ca:	8b ef       	ldi	r24, 0xFB	; 251
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
	dt->minute = get_num();
     5d2:	0e 94 76 02 	call	0x4ec	; 0x4ec <get_num>
     5d6:	8d 83       	std	Y+5, r24	; 0x05
	avr_wait(2000);
     5d8:	80 ed       	ldi	r24, 0xD0	; 208
     5da:	97 e0       	ldi	r25, 0x07	; 7
     5dc:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
	
	lcd_clr();
     5e0:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
	lcd_pos(0,1);
     5e4:	61 e0       	ldi	r22, 0x01	; 1
     5e6:	80 e0       	ldi	r24, 0x00	; 0
     5e8:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	strcpy(str, "Hour: ");
     5ec:	87 e0       	ldi	r24, 0x07	; 7
     5ee:	ef eb       	ldi	r30, 0xBF	; 191
     5f0:	f0 e0       	ldi	r31, 0x00	; 0
     5f2:	ab ef       	ldi	r26, 0xFB	; 251
     5f4:	b0 e0       	ldi	r27, 0x00	; 0
     5f6:	01 90       	ld	r0, Z+
     5f8:	0d 92       	st	X+, r0
     5fa:	8a 95       	dec	r24
     5fc:	e1 f7       	brne	.-8      	; 0x5f6 <set_time+0x50>
	lcd_puts2(str);
     5fe:	8b ef       	ldi	r24, 0xFB	; 251
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
	dt->hour = get_num();
     606:	0e 94 76 02 	call	0x4ec	; 0x4ec <get_num>
     60a:	8c 83       	std	Y+4, r24	; 0x04
	avr_wait(2000);
     60c:	80 ed       	ldi	r24, 0xD0	; 208
     60e:	97 e0       	ldi	r25, 0x07	; 7
     610:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
	dt->second = 0;
     614:	1e 82       	std	Y+6, r1	; 0x06
	dt->subsecond = 0;
     616:	1f 82       	std	Y+7, r1	; 0x07
}
     618:	df 91       	pop	r29
     61a:	cf 91       	pop	r28
     61c:	08 95       	ret

0000061e <set_date>:
/************************************************************************/
/* Prompt user to enter in first day, then month, then year             */
/************************************************************************/
void set_date(struct datetime *dt){
     61e:	cf 93       	push	r28
     620:	df 93       	push	r29
     622:	ec 01       	movw	r28, r24
	lcd_clr();
     624:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
	lcd_pos(0,1);
     628:	61 e0       	ldi	r22, 0x01	; 1
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	strcpy(str, "Day: ");
     630:	86 e0       	ldi	r24, 0x06	; 6
     632:	e6 ec       	ldi	r30, 0xC6	; 198
     634:	f0 e0       	ldi	r31, 0x00	; 0
     636:	ab ef       	ldi	r26, 0xFB	; 251
     638:	b0 e0       	ldi	r27, 0x00	; 0
     63a:	01 90       	ld	r0, Z+
     63c:	0d 92       	st	X+, r0
     63e:	8a 95       	dec	r24
     640:	e1 f7       	brne	.-8      	; 0x63a <set_date+0x1c>
	lcd_puts2(str);
     642:	8b ef       	ldi	r24, 0xFB	; 251
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
	dt->day = get_num();
     64a:	0e 94 76 02 	call	0x4ec	; 0x4ec <get_num>
     64e:	8b 83       	std	Y+3, r24	; 0x03
	avr_wait(2000);
     650:	80 ed       	ldi	r24, 0xD0	; 208
     652:	97 e0       	ldi	r25, 0x07	; 7
     654:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
	
	lcd_clr();
     658:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
	lcd_pos(0,1);
     65c:	61 e0       	ldi	r22, 0x01	; 1
     65e:	80 e0       	ldi	r24, 0x00	; 0
     660:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	strcpy(str, "Month: ");
     664:	88 e0       	ldi	r24, 0x08	; 8
     666:	ec ec       	ldi	r30, 0xCC	; 204
     668:	f0 e0       	ldi	r31, 0x00	; 0
     66a:	ab ef       	ldi	r26, 0xFB	; 251
     66c:	b0 e0       	ldi	r27, 0x00	; 0
     66e:	01 90       	ld	r0, Z+
     670:	0d 92       	st	X+, r0
     672:	8a 95       	dec	r24
     674:	e1 f7       	brne	.-8      	; 0x66e <set_date+0x50>
	lcd_puts2(str);
     676:	8b ef       	ldi	r24, 0xFB	; 251
     678:	90 e0       	ldi	r25, 0x00	; 0
     67a:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
	dt->month = get_num();
     67e:	0e 94 76 02 	call	0x4ec	; 0x4ec <get_num>
     682:	8a 83       	std	Y+2, r24	; 0x02
	avr_wait(2000);
     684:	80 ed       	ldi	r24, 0xD0	; 208
     686:	97 e0       	ldi	r25, 0x07	; 7
     688:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
	
	lcd_clr();
     68c:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
	lcd_pos(0,1);
     690:	61 e0       	ldi	r22, 0x01	; 1
     692:	80 e0       	ldi	r24, 0x00	; 0
     694:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
	strcpy(str, "Year: ");
     698:	87 e0       	ldi	r24, 0x07	; 7
     69a:	e4 ed       	ldi	r30, 0xD4	; 212
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	ab ef       	ldi	r26, 0xFB	; 251
     6a0:	b0 e0       	ldi	r27, 0x00	; 0
     6a2:	01 90       	ld	r0, Z+
     6a4:	0d 92       	st	X+, r0
     6a6:	8a 95       	dec	r24
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <set_date+0x84>
	lcd_puts2(str);
     6aa:	8b ef       	ldi	r24, 0xFB	; 251
     6ac:	90 e0       	ldi	r25, 0x00	; 0
     6ae:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
	dt->year = get_num();
     6b2:	0e 94 76 02 	call	0x4ec	; 0x4ec <get_num>
     6b6:	99 83       	std	Y+1, r25	; 0x01
     6b8:	88 83       	st	Y, r24
	avr_wait(2000);
     6ba:	80 ed       	ldi	r24, 0xD0	; 208
     6bc:	97 e0       	ldi	r25, 0x07	; 7
     6be:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
}
     6c2:	df 91       	pop	r29
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <main>:
}
char str[17];
char out[17];


int main(void){
     6c8:	cf 93       	push	r28
     6ca:	df 93       	push	r29
     6cc:	cd b7       	in	r28, 0x3d	; 61
     6ce:	de b7       	in	r29, 0x3e	; 62
     6d0:	e6 97       	sbiw	r28, 0x36	; 54
     6d2:	0f b6       	in	r0, 0x3f	; 63
     6d4:	f8 94       	cli
     6d6:	de bf       	out	0x3e, r29	; 62
     6d8:	0f be       	out	0x3f, r0	; 63
     6da:	cd bf       	out	0x3d, r28	; 61
#include "lcd.h"

void
avr_init(void)
{
	WDTCR = 15;
     6dc:	8f e0       	ldi	r24, 0x0F	; 15
     6de:	81 bd       	out	0x21, r24	; 33


int main(void){
	// Initialize everything
	avr_init();	
	lcd_init();
     6e0:	0e 94 09 04 	call	0x812	; 0x812 <lcd_init>
	DDRA |= (1 << PA1);
     6e4:	d1 9a       	sbi	0x1a, 1	; 26
	struct datetime dt = {2019, 3, 21, 11, 55, 0, 0, 0};
     6e6:	89 e0       	ldi	r24, 0x09	; 9
     6e8:	e0 e6       	ldi	r30, 0x60	; 96
     6ea:	f0 e0       	ldi	r31, 0x00	; 0
     6ec:	de 01       	movw	r26, r28
     6ee:	11 96       	adiw	r26, 0x01	; 1
     6f0:	01 90       	ld	r0, Z+
     6f2:	0d 92       	st	X+, r0
     6f4:	8a 95       	dec	r24
     6f6:	e1 f7       	brne	.-8      	; 0x6f0 <main+0x28>
	display_time(&dt);
     6f8:	ce 01       	movw	r24, r28
     6fa:	01 96       	adiw	r24, 0x01	; 1
     6fc:	0e 94 00 01 	call	0x200	; 0x200 <display_time>
	struct datetime alarms[5];
	int num_alarms = 0;
     700:	e1 2c       	mov	r14, r1
     702:	f1 2c       	mov	r15, r1
	for(;;){
		//Main loop will check if key pressed, and if it is A or B, do something
		avr_wait(850);
		keep_time(&dt);
		display_time(&dt);
		sound_alarm = check_alarm(&dt, alarms, num_alarms);
     704:	6e 01       	movw	r12, r28
     706:	8a e0       	ldi	r24, 0x0A	; 10
     708:	c8 0e       	add	r12, r24
     70a:	d1 1c       	adc	r13, r1
     70c:	ac 2c       	mov	r10, r12
     70e:	bd 2c       	mov	r11, r13
				set_date(&dt);
				set_time(&dt);
				break;
			// Toggle military time
			case 8:
				dt.military = dt.military^1;
     710:	99 24       	eor	r9, r9
     712:	93 94       	inc	r9
	int num_alarms = 0;
	int sound_alarm = 0;
	struct note n = {A, 30};
	for(;;){
		//Main loop will check if key pressed, and if it is A or B, do something
		avr_wait(850);
     714:	82 e5       	ldi	r24, 0x52	; 82
     716:	93 e0       	ldi	r25, 0x03	; 3
     718:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
		keep_time(&dt);
     71c:	ce 01       	movw	r24, r28
     71e:	01 96       	adiw	r24, 0x01	; 1
     720:	0e 94 01 02 	call	0x402	; 0x402 <keep_time>
		display_time(&dt);
     724:	ce 01       	movw	r24, r28
     726:	01 96       	adiw	r24, 0x01	; 1
     728:	0e 94 00 01 	call	0x200	; 0x200 <display_time>
		sound_alarm = check_alarm(&dt, alarms, num_alarms);
     72c:	a7 01       	movw	r20, r14
     72e:	6a 2d       	mov	r22, r10
     730:	7b 2d       	mov	r23, r11
     732:	ce 01       	movw	r24, r28
     734:	01 96       	adiw	r24, 0x01	; 1
     736:	0e 94 c0 00 	call	0x180	; 0x180 <check_alarm>
		
		if(sound_alarm){
     73a:	89 2b       	or	r24, r25
     73c:	69 f0       	breq	.+26     	; 0x758 <main+0x90>
     73e:	03 e0       	ldi	r16, 0x03	; 3
     740:	10 e0       	ldi	r17, 0x00	; 0
			for(int i = 0; i < 3; ++i){
				PlayNote(n.freq, n.dur);
     742:	4e e1       	ldi	r20, 0x1E	; 30
     744:	50 e0       	ldi	r21, 0x00	; 0
     746:	60 e0       	ldi	r22, 0x00	; 0
     748:	70 e0       	ldi	r23, 0x00	; 0
     74a:	8f ed       	ldi	r24, 0xDF	; 223
     74c:	94 e4       	ldi	r25, 0x44	; 68
     74e:	0e 94 6c 00 	call	0xd8	; 0xd8 <PlayNote>
     752:	01 50       	subi	r16, 0x01	; 1
     754:	11 09       	sbc	r17, r1
		keep_time(&dt);
		display_time(&dt);
		sound_alarm = check_alarm(&dt, alarms, num_alarms);
		
		if(sound_alarm){
			for(int i = 0; i < 3; ++i){
     756:	a9 f7       	brne	.-22     	; 0x742 <main+0x7a>
				PlayNote(n.freq, n.dur);
			}
		}
			 
		int key = get_key();
     758:	0e 94 4f 02 	call	0x49e	; 0x49e <get_key>
		switch(key){
     75c:	88 30       	cpi	r24, 0x08	; 8
     75e:	91 05       	cpc	r25, r1
     760:	71 f0       	breq	.+28     	; 0x77e <main+0xb6>
     762:	8c 30       	cpi	r24, 0x0C	; 12
     764:	91 05       	cpc	r25, r1
     766:	99 f0       	breq	.+38     	; 0x78e <main+0xc6>
     768:	04 97       	sbiw	r24, 0x04	; 4
     76a:	a1 f6       	brne	.-88     	; 0x714 <main+0x4c>
			// Set date and time
			case 4:
				set_date(&dt);
     76c:	ce 01       	movw	r24, r28
     76e:	01 96       	adiw	r24, 0x01	; 1
     770:	0e 94 0f 03 	call	0x61e	; 0x61e <set_date>
				set_time(&dt);
     774:	ce 01       	movw	r24, r28
     776:	01 96       	adiw	r24, 0x01	; 1
     778:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <set_time>
				break;
     77c:	cb cf       	rjmp	.-106    	; 0x714 <main+0x4c>
			// Toggle military time
			case 8:
				dt.military = dt.military^1;
     77e:	89 85       	ldd	r24, Y+9	; 0x09
     780:	89 25       	eor	r24, r9
     782:	89 87       	std	Y+9, r24	; 0x09
				avr_wait(1500);
     784:	8c ed       	ldi	r24, 0xDC	; 220
     786:	95 e0       	ldi	r25, 0x05	; 5
     788:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
				break;
     78c:	c3 cf       	rjmp	.-122    	; 0x714 <main+0x4c>
			case 12:
				lcd_clr();
     78e:	0e 94 31 04 	call	0x862	; 0x862 <lcd_clr>
				lcd_pos(0,1);
     792:	69 2d       	mov	r22, r9
     794:	80 e0       	ldi	r24, 0x00	; 0
     796:	0e 94 36 04 	call	0x86c	; 0x86c <lcd_pos>
				lcd_puts2("Set New Alarm");	
     79a:	8b ed       	ldi	r24, 0xDB	; 219
     79c:	90 e0       	ldi	r25, 0x00	; 0
     79e:	0e 94 4a 04 	call	0x894	; 0x894 <lcd_puts2>
				avr_wait(10000);
     7a2:	80 e1       	ldi	r24, 0x10	; 16
     7a4:	97 e2       	ldi	r25, 0x27	; 39
     7a6:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
				set_date(&alarms[num_alarms]);
     7aa:	87 01       	movw	r16, r14
     7ac:	00 0f       	add	r16, r16
     7ae:	11 1f       	adc	r17, r17
     7b0:	00 0f       	add	r16, r16
     7b2:	11 1f       	adc	r17, r17
     7b4:	00 0f       	add	r16, r16
     7b6:	11 1f       	adc	r17, r17
     7b8:	0e 0d       	add	r16, r14
     7ba:	1f 1d       	adc	r17, r15
     7bc:	0c 0d       	add	r16, r12
     7be:	1d 1d       	adc	r17, r13
     7c0:	c8 01       	movw	r24, r16
     7c2:	0e 94 0f 03 	call	0x61e	; 0x61e <set_date>
				set_time(&alarms[num_alarms]);
     7c6:	c8 01       	movw	r24, r16
     7c8:	0e 94 d3 02 	call	0x5a6	; 0x5a6 <set_time>
				num_alarms++;
     7cc:	8f ef       	ldi	r24, 0xFF	; 255
     7ce:	e8 1a       	sub	r14, r24
     7d0:	f8 0a       	sbc	r15, r24
     7d2:	a0 cf       	rjmp	.-192    	; 0x714 <main+0x4c>

000007d4 <output>:
}

void
lcd_put(char c)
{
	write(c, 1);
     7d4:	66 23       	and	r22, r22
     7d6:	11 f0       	breq	.+4      	; 0x7dc <output+0x8>
     7d8:	c0 9a       	sbi	0x18, 0	; 24
     7da:	01 c0       	rjmp	.+2      	; 0x7de <output+0xa>
     7dc:	c0 98       	cbi	0x18, 0	; 24
     7de:	c1 98       	cbi	0x18, 1	; 24
     7e0:	82 bb       	out	0x12, r24	; 18
     7e2:	8f ef       	ldi	r24, 0xFF	; 255
     7e4:	81 bb       	out	0x11, r24	; 17
     7e6:	c2 9a       	sbi	0x18, 2	; 24
     7e8:	00 00       	nop
     7ea:	00 00       	nop
     7ec:	00 00       	nop
     7ee:	c2 98       	cbi	0x18, 2	; 24
     7f0:	08 95       	ret

000007f2 <write>:
     7f2:	c0 98       	cbi	0x18, 0	; 24
     7f4:	c1 9a       	sbi	0x18, 1	; 24
     7f6:	11 ba       	out	0x11, r1	; 17
     7f8:	90 b3       	in	r25, 0x10	; 16
     7fa:	c2 9a       	sbi	0x18, 2	; 24
     7fc:	00 00       	nop
     7fe:	00 00       	nop
     800:	00 00       	nop
     802:	11 ba       	out	0x11, r1	; 17
     804:	90 b3       	in	r25, 0x10	; 16
     806:	c2 98       	cbi	0x18, 2	; 24
     808:	99 23       	and	r25, r25
     80a:	9c f3       	brlt	.-26     	; 0x7f2 <write>
     80c:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <output>
     810:	08 95       	ret

00000812 <lcd_init>:
     812:	b8 9a       	sbi	0x17, 0	; 23
     814:	b9 9a       	sbi	0x17, 1	; 23
     816:	ba 9a       	sbi	0x17, 2	; 23
     818:	80 e1       	ldi	r24, 0x10	; 16
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
     820:	60 e0       	ldi	r22, 0x00	; 0
     822:	80 e3       	ldi	r24, 0x30	; 48
     824:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <output>
     828:	85 e0       	ldi	r24, 0x05	; 5
     82a:	90 e0       	ldi	r25, 0x00	; 0
     82c:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
     830:	60 e0       	ldi	r22, 0x00	; 0
     832:	80 e3       	ldi	r24, 0x30	; 48
     834:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <output>
     838:	81 e0       	ldi	r24, 0x01	; 1
     83a:	90 e0       	ldi	r25, 0x00	; 0
     83c:	0e 94 5a 00 	call	0xb4	; 0xb4 <avr_wait>
     840:	60 e0       	ldi	r22, 0x00	; 0
     842:	8c e3       	ldi	r24, 0x3C	; 60
     844:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     848:	60 e0       	ldi	r22, 0x00	; 0
     84a:	8c e0       	ldi	r24, 0x0C	; 12
     84c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	86 e0       	ldi	r24, 0x06	; 6
     854:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     858:	60 e0       	ldi	r22, 0x00	; 0
     85a:	81 e0       	ldi	r24, 0x01	; 1
     85c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     860:	08 95       	ret

00000862 <lcd_clr>:
     862:	60 e0       	ldi	r22, 0x00	; 0
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     86a:	08 95       	ret

0000086c <lcd_pos>:
     86c:	cf 93       	push	r28
     86e:	c6 2f       	mov	r28, r22
     870:	98 e2       	ldi	r25, 0x28	; 40
     872:	89 9f       	mul	r24, r25
     874:	c0 0d       	add	r28, r0
     876:	11 24       	eor	r1, r1
     878:	60 e0       	ldi	r22, 0x00	; 0
     87a:	82 e0       	ldi	r24, 0x02	; 2
     87c:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     880:	cc 23       	and	r28, r28
     882:	31 f0       	breq	.+12     	; 0x890 <lcd_pos+0x24>
     884:	60 e0       	ldi	r22, 0x00	; 0
     886:	84 e1       	ldi	r24, 0x14	; 20
     888:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
     88c:	c1 50       	subi	r28, 0x01	; 1
     88e:	d1 f7       	brne	.-12     	; 0x884 <lcd_pos+0x18>
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <lcd_puts2>:
	}
}
*/
void
lcd_puts2(const char *s)
{
     894:	cf 93       	push	r28
     896:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
     898:	ec 01       	movw	r28, r24
     89a:	21 96       	adiw	r28, 0x01	; 1
     89c:	fc 01       	movw	r30, r24
     89e:	80 81       	ld	r24, Z
     8a0:	88 23       	and	r24, r24
     8a2:	31 f0       	breq	.+12     	; 0x8b0 <lcd_puts2+0x1c>
		write(c, 1);
     8a4:	61 e0       	ldi	r22, 0x01	; 1
     8a6:	0e 94 f9 03 	call	0x7f2	; 0x7f2 <write>
*/
void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
     8aa:	89 91       	ld	r24, Y+
     8ac:	81 11       	cpse	r24, r1
     8ae:	fa cf       	rjmp	.-12     	; 0x8a4 <lcd_puts2+0x10>
		write(c, 1);
	}
     8b0:	df 91       	pop	r29
     8b2:	cf 91       	pop	r28
     8b4:	08 95       	ret

000008b6 <__divsf3>:
     8b6:	0e 94 6f 04 	call	0x8de	; 0x8de <__divsf3x>
     8ba:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_round>
     8be:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_pscB>
     8c2:	58 f0       	brcs	.+22     	; 0x8da <__divsf3+0x24>
     8c4:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_pscA>
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__divsf3+0x24>
     8ca:	29 f4       	brne	.+10     	; 0x8d6 <__divsf3+0x20>
     8cc:	5f 3f       	cpi	r21, 0xFF	; 255
     8ce:	29 f0       	breq	.+10     	; 0x8da <__divsf3+0x24>
     8d0:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_inf>
     8d4:	51 11       	cpse	r21, r1
     8d6:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_szero>
     8da:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_nan>

000008de <__divsf3x>:
     8de:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_split3>
     8e2:	68 f3       	brcs	.-38     	; 0x8be <__divsf3+0x8>

000008e4 <__divsf3_pse>:
     8e4:	99 23       	and	r25, r25
     8e6:	b1 f3       	breq	.-20     	; 0x8d4 <__divsf3+0x1e>
     8e8:	55 23       	and	r21, r21
     8ea:	91 f3       	breq	.-28     	; 0x8d0 <__divsf3+0x1a>
     8ec:	95 1b       	sub	r25, r21
     8ee:	55 0b       	sbc	r21, r21
     8f0:	bb 27       	eor	r27, r27
     8f2:	aa 27       	eor	r26, r26
     8f4:	62 17       	cp	r22, r18
     8f6:	73 07       	cpc	r23, r19
     8f8:	84 07       	cpc	r24, r20
     8fa:	38 f0       	brcs	.+14     	; 0x90a <__divsf3_pse+0x26>
     8fc:	9f 5f       	subi	r25, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	22 0f       	add	r18, r18
     902:	33 1f       	adc	r19, r19
     904:	44 1f       	adc	r20, r20
     906:	aa 1f       	adc	r26, r26
     908:	a9 f3       	breq	.-22     	; 0x8f4 <__divsf3_pse+0x10>
     90a:	35 d0       	rcall	.+106    	; 0x976 <__divsf3_pse+0x92>
     90c:	0e 2e       	mov	r0, r30
     90e:	3a f0       	brmi	.+14     	; 0x91e <__divsf3_pse+0x3a>
     910:	e0 e8       	ldi	r30, 0x80	; 128
     912:	32 d0       	rcall	.+100    	; 0x978 <__divsf3_pse+0x94>
     914:	91 50       	subi	r25, 0x01	; 1
     916:	50 40       	sbci	r21, 0x00	; 0
     918:	e6 95       	lsr	r30
     91a:	00 1c       	adc	r0, r0
     91c:	ca f7       	brpl	.-14     	; 0x910 <__divsf3_pse+0x2c>
     91e:	2b d0       	rcall	.+86     	; 0x976 <__divsf3_pse+0x92>
     920:	fe 2f       	mov	r31, r30
     922:	29 d0       	rcall	.+82     	; 0x976 <__divsf3_pse+0x92>
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	88 1f       	adc	r24, r24
     92a:	bb 1f       	adc	r27, r27
     92c:	26 17       	cp	r18, r22
     92e:	37 07       	cpc	r19, r23
     930:	48 07       	cpc	r20, r24
     932:	ab 07       	cpc	r26, r27
     934:	b0 e8       	ldi	r27, 0x80	; 128
     936:	09 f0       	breq	.+2      	; 0x93a <__divsf3_pse+0x56>
     938:	bb 0b       	sbc	r27, r27
     93a:	80 2d       	mov	r24, r0
     93c:	bf 01       	movw	r22, r30
     93e:	ff 27       	eor	r31, r31
     940:	93 58       	subi	r25, 0x83	; 131
     942:	5f 4f       	sbci	r21, 0xFF	; 255
     944:	3a f0       	brmi	.+14     	; 0x954 <__divsf3_pse+0x70>
     946:	9e 3f       	cpi	r25, 0xFE	; 254
     948:	51 05       	cpc	r21, r1
     94a:	78 f0       	brcs	.+30     	; 0x96a <__divsf3_pse+0x86>
     94c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_inf>
     950:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_szero>
     954:	5f 3f       	cpi	r21, 0xFF	; 255
     956:	e4 f3       	brlt	.-8      	; 0x950 <__divsf3_pse+0x6c>
     958:	98 3e       	cpi	r25, 0xE8	; 232
     95a:	d4 f3       	brlt	.-12     	; 0x950 <__divsf3_pse+0x6c>
     95c:	86 95       	lsr	r24
     95e:	77 95       	ror	r23
     960:	67 95       	ror	r22
     962:	b7 95       	ror	r27
     964:	f7 95       	ror	r31
     966:	9f 5f       	subi	r25, 0xFF	; 255
     968:	c9 f7       	brne	.-14     	; 0x95c <__divsf3_pse+0x78>
     96a:	88 0f       	add	r24, r24
     96c:	91 1d       	adc	r25, r1
     96e:	96 95       	lsr	r25
     970:	87 95       	ror	r24
     972:	97 f9       	bld	r25, 7
     974:	08 95       	ret
     976:	e1 e0       	ldi	r30, 0x01	; 1
     978:	66 0f       	add	r22, r22
     97a:	77 1f       	adc	r23, r23
     97c:	88 1f       	adc	r24, r24
     97e:	bb 1f       	adc	r27, r27
     980:	62 17       	cp	r22, r18
     982:	73 07       	cpc	r23, r19
     984:	84 07       	cpc	r24, r20
     986:	ba 07       	cpc	r27, r26
     988:	20 f0       	brcs	.+8      	; 0x992 <__divsf3_pse+0xae>
     98a:	62 1b       	sub	r22, r18
     98c:	73 0b       	sbc	r23, r19
     98e:	84 0b       	sbc	r24, r20
     990:	ba 0b       	sbc	r27, r26
     992:	ee 1f       	adc	r30, r30
     994:	88 f7       	brcc	.-30     	; 0x978 <__divsf3_pse+0x94>
     996:	e0 95       	com	r30
     998:	08 95       	ret

0000099a <__fixunssfsi>:
     99a:	0e 94 69 05 	call	0xad2	; 0xad2 <__fp_splitA>
     99e:	88 f0       	brcs	.+34     	; 0x9c2 <__fixunssfsi+0x28>
     9a0:	9f 57       	subi	r25, 0x7F	; 127
     9a2:	98 f0       	brcs	.+38     	; 0x9ca <__fixunssfsi+0x30>
     9a4:	b9 2f       	mov	r27, r25
     9a6:	99 27       	eor	r25, r25
     9a8:	b7 51       	subi	r27, 0x17	; 23
     9aa:	b0 f0       	brcs	.+44     	; 0x9d8 <__fixunssfsi+0x3e>
     9ac:	e1 f0       	breq	.+56     	; 0x9e6 <__fixunssfsi+0x4c>
     9ae:	66 0f       	add	r22, r22
     9b0:	77 1f       	adc	r23, r23
     9b2:	88 1f       	adc	r24, r24
     9b4:	99 1f       	adc	r25, r25
     9b6:	1a f0       	brmi	.+6      	; 0x9be <__fixunssfsi+0x24>
     9b8:	ba 95       	dec	r27
     9ba:	c9 f7       	brne	.-14     	; 0x9ae <__fixunssfsi+0x14>
     9bc:	14 c0       	rjmp	.+40     	; 0x9e6 <__fixunssfsi+0x4c>
     9be:	b1 30       	cpi	r27, 0x01	; 1
     9c0:	91 f0       	breq	.+36     	; 0x9e6 <__fixunssfsi+0x4c>
     9c2:	0e 94 83 05 	call	0xb06	; 0xb06 <__fp_zero>
     9c6:	b1 e0       	ldi	r27, 0x01	; 1
     9c8:	08 95       	ret
     9ca:	0c 94 83 05 	jmp	0xb06	; 0xb06 <__fp_zero>
     9ce:	67 2f       	mov	r22, r23
     9d0:	78 2f       	mov	r23, r24
     9d2:	88 27       	eor	r24, r24
     9d4:	b8 5f       	subi	r27, 0xF8	; 248
     9d6:	39 f0       	breq	.+14     	; 0x9e6 <__fixunssfsi+0x4c>
     9d8:	b9 3f       	cpi	r27, 0xF9	; 249
     9da:	cc f3       	brlt	.-14     	; 0x9ce <__fixunssfsi+0x34>
     9dc:	86 95       	lsr	r24
     9de:	77 95       	ror	r23
     9e0:	67 95       	ror	r22
     9e2:	b3 95       	inc	r27
     9e4:	d9 f7       	brne	.-10     	; 0x9dc <__fixunssfsi+0x42>
     9e6:	3e f4       	brtc	.+14     	; 0x9f6 <__fixunssfsi+0x5c>
     9e8:	90 95       	com	r25
     9ea:	80 95       	com	r24
     9ec:	70 95       	com	r23
     9ee:	61 95       	neg	r22
     9f0:	7f 4f       	sbci	r23, 0xFF	; 255
     9f2:	8f 4f       	sbci	r24, 0xFF	; 255
     9f4:	9f 4f       	sbci	r25, 0xFF	; 255
     9f6:	08 95       	ret

000009f8 <__floatunsisf>:
     9f8:	e8 94       	clt
     9fa:	09 c0       	rjmp	.+18     	; 0xa0e <__floatsisf+0x12>

000009fc <__floatsisf>:
     9fc:	97 fb       	bst	r25, 7
     9fe:	3e f4       	brtc	.+14     	; 0xa0e <__floatsisf+0x12>
     a00:	90 95       	com	r25
     a02:	80 95       	com	r24
     a04:	70 95       	com	r23
     a06:	61 95       	neg	r22
     a08:	7f 4f       	sbci	r23, 0xFF	; 255
     a0a:	8f 4f       	sbci	r24, 0xFF	; 255
     a0c:	9f 4f       	sbci	r25, 0xFF	; 255
     a0e:	99 23       	and	r25, r25
     a10:	a9 f0       	breq	.+42     	; 0xa3c <__floatsisf+0x40>
     a12:	f9 2f       	mov	r31, r25
     a14:	96 e9       	ldi	r25, 0x96	; 150
     a16:	bb 27       	eor	r27, r27
     a18:	93 95       	inc	r25
     a1a:	f6 95       	lsr	r31
     a1c:	87 95       	ror	r24
     a1e:	77 95       	ror	r23
     a20:	67 95       	ror	r22
     a22:	b7 95       	ror	r27
     a24:	f1 11       	cpse	r31, r1
     a26:	f8 cf       	rjmp	.-16     	; 0xa18 <__floatsisf+0x1c>
     a28:	fa f4       	brpl	.+62     	; 0xa68 <__floatsisf+0x6c>
     a2a:	bb 0f       	add	r27, r27
     a2c:	11 f4       	brne	.+4      	; 0xa32 <__floatsisf+0x36>
     a2e:	60 ff       	sbrs	r22, 0
     a30:	1b c0       	rjmp	.+54     	; 0xa68 <__floatsisf+0x6c>
     a32:	6f 5f       	subi	r22, 0xFF	; 255
     a34:	7f 4f       	sbci	r23, 0xFF	; 255
     a36:	8f 4f       	sbci	r24, 0xFF	; 255
     a38:	9f 4f       	sbci	r25, 0xFF	; 255
     a3a:	16 c0       	rjmp	.+44     	; 0xa68 <__floatsisf+0x6c>
     a3c:	88 23       	and	r24, r24
     a3e:	11 f0       	breq	.+4      	; 0xa44 <__floatsisf+0x48>
     a40:	96 e9       	ldi	r25, 0x96	; 150
     a42:	11 c0       	rjmp	.+34     	; 0xa66 <__floatsisf+0x6a>
     a44:	77 23       	and	r23, r23
     a46:	21 f0       	breq	.+8      	; 0xa50 <__floatsisf+0x54>
     a48:	9e e8       	ldi	r25, 0x8E	; 142
     a4a:	87 2f       	mov	r24, r23
     a4c:	76 2f       	mov	r23, r22
     a4e:	05 c0       	rjmp	.+10     	; 0xa5a <__floatsisf+0x5e>
     a50:	66 23       	and	r22, r22
     a52:	71 f0       	breq	.+28     	; 0xa70 <__floatsisf+0x74>
     a54:	96 e8       	ldi	r25, 0x86	; 134
     a56:	86 2f       	mov	r24, r22
     a58:	70 e0       	ldi	r23, 0x00	; 0
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	2a f0       	brmi	.+10     	; 0xa68 <__floatsisf+0x6c>
     a5e:	9a 95       	dec	r25
     a60:	66 0f       	add	r22, r22
     a62:	77 1f       	adc	r23, r23
     a64:	88 1f       	adc	r24, r24
     a66:	da f7       	brpl	.-10     	; 0xa5e <__floatsisf+0x62>
     a68:	88 0f       	add	r24, r24
     a6a:	96 95       	lsr	r25
     a6c:	87 95       	ror	r24
     a6e:	97 f9       	bld	r25, 7
     a70:	08 95       	ret

00000a72 <__fp_inf>:
     a72:	97 f9       	bld	r25, 7
     a74:	9f 67       	ori	r25, 0x7F	; 127
     a76:	80 e8       	ldi	r24, 0x80	; 128
     a78:	70 e0       	ldi	r23, 0x00	; 0
     a7a:	60 e0       	ldi	r22, 0x00	; 0
     a7c:	08 95       	ret

00000a7e <__fp_nan>:
     a7e:	9f ef       	ldi	r25, 0xFF	; 255
     a80:	80 ec       	ldi	r24, 0xC0	; 192
     a82:	08 95       	ret

00000a84 <__fp_pscA>:
     a84:	00 24       	eor	r0, r0
     a86:	0a 94       	dec	r0
     a88:	16 16       	cp	r1, r22
     a8a:	17 06       	cpc	r1, r23
     a8c:	18 06       	cpc	r1, r24
     a8e:	09 06       	cpc	r0, r25
     a90:	08 95       	ret

00000a92 <__fp_pscB>:
     a92:	00 24       	eor	r0, r0
     a94:	0a 94       	dec	r0
     a96:	12 16       	cp	r1, r18
     a98:	13 06       	cpc	r1, r19
     a9a:	14 06       	cpc	r1, r20
     a9c:	05 06       	cpc	r0, r21
     a9e:	08 95       	ret

00000aa0 <__fp_round>:
     aa0:	09 2e       	mov	r0, r25
     aa2:	03 94       	inc	r0
     aa4:	00 0c       	add	r0, r0
     aa6:	11 f4       	brne	.+4      	; 0xaac <__fp_round+0xc>
     aa8:	88 23       	and	r24, r24
     aaa:	52 f0       	brmi	.+20     	; 0xac0 <__fp_round+0x20>
     aac:	bb 0f       	add	r27, r27
     aae:	40 f4       	brcc	.+16     	; 0xac0 <__fp_round+0x20>
     ab0:	bf 2b       	or	r27, r31
     ab2:	11 f4       	brne	.+4      	; 0xab8 <__fp_round+0x18>
     ab4:	60 ff       	sbrs	r22, 0
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__fp_round+0x20>
     ab8:	6f 5f       	subi	r22, 0xFF	; 255
     aba:	7f 4f       	sbci	r23, 0xFF	; 255
     abc:	8f 4f       	sbci	r24, 0xFF	; 255
     abe:	9f 4f       	sbci	r25, 0xFF	; 255
     ac0:	08 95       	ret

00000ac2 <__fp_split3>:
     ac2:	57 fd       	sbrc	r21, 7
     ac4:	90 58       	subi	r25, 0x80	; 128
     ac6:	44 0f       	add	r20, r20
     ac8:	55 1f       	adc	r21, r21
     aca:	59 f0       	breq	.+22     	; 0xae2 <__fp_splitA+0x10>
     acc:	5f 3f       	cpi	r21, 0xFF	; 255
     ace:	71 f0       	breq	.+28     	; 0xaec <__fp_splitA+0x1a>
     ad0:	47 95       	ror	r20

00000ad2 <__fp_splitA>:
     ad2:	88 0f       	add	r24, r24
     ad4:	97 fb       	bst	r25, 7
     ad6:	99 1f       	adc	r25, r25
     ad8:	61 f0       	breq	.+24     	; 0xaf2 <__fp_splitA+0x20>
     ada:	9f 3f       	cpi	r25, 0xFF	; 255
     adc:	79 f0       	breq	.+30     	; 0xafc <__fp_splitA+0x2a>
     ade:	87 95       	ror	r24
     ae0:	08 95       	ret
     ae2:	12 16       	cp	r1, r18
     ae4:	13 06       	cpc	r1, r19
     ae6:	14 06       	cpc	r1, r20
     ae8:	55 1f       	adc	r21, r21
     aea:	f2 cf       	rjmp	.-28     	; 0xad0 <__fp_split3+0xe>
     aec:	46 95       	lsr	r20
     aee:	f1 df       	rcall	.-30     	; 0xad2 <__fp_splitA>
     af0:	08 c0       	rjmp	.+16     	; 0xb02 <__fp_splitA+0x30>
     af2:	16 16       	cp	r1, r22
     af4:	17 06       	cpc	r1, r23
     af6:	18 06       	cpc	r1, r24
     af8:	99 1f       	adc	r25, r25
     afa:	f1 cf       	rjmp	.-30     	; 0xade <__fp_splitA+0xc>
     afc:	86 95       	lsr	r24
     afe:	71 05       	cpc	r23, r1
     b00:	61 05       	cpc	r22, r1
     b02:	08 94       	sec
     b04:	08 95       	ret

00000b06 <__fp_zero>:
     b06:	e8 94       	clt

00000b08 <__fp_szero>:
     b08:	bb 27       	eor	r27, r27
     b0a:	66 27       	eor	r22, r22
     b0c:	77 27       	eor	r23, r23
     b0e:	cb 01       	movw	r24, r22
     b10:	97 f9       	bld	r25, 7
     b12:	08 95       	ret

00000b14 <__mulsf3>:
     b14:	0e 94 9d 05 	call	0xb3a	; 0xb3a <__mulsf3x>
     b18:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__fp_round>
     b1c:	0e 94 42 05 	call	0xa84	; 0xa84 <__fp_pscA>
     b20:	38 f0       	brcs	.+14     	; 0xb30 <__mulsf3+0x1c>
     b22:	0e 94 49 05 	call	0xa92	; 0xa92 <__fp_pscB>
     b26:	20 f0       	brcs	.+8      	; 0xb30 <__mulsf3+0x1c>
     b28:	95 23       	and	r25, r21
     b2a:	11 f0       	breq	.+4      	; 0xb30 <__mulsf3+0x1c>
     b2c:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_inf>
     b30:	0c 94 3f 05 	jmp	0xa7e	; 0xa7e <__fp_nan>
     b34:	11 24       	eor	r1, r1
     b36:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_szero>

00000b3a <__mulsf3x>:
     b3a:	0e 94 61 05 	call	0xac2	; 0xac2 <__fp_split3>
     b3e:	70 f3       	brcs	.-36     	; 0xb1c <__mulsf3+0x8>

00000b40 <__mulsf3_pse>:
     b40:	95 9f       	mul	r25, r21
     b42:	c1 f3       	breq	.-16     	; 0xb34 <__mulsf3+0x20>
     b44:	95 0f       	add	r25, r21
     b46:	50 e0       	ldi	r21, 0x00	; 0
     b48:	55 1f       	adc	r21, r21
     b4a:	62 9f       	mul	r22, r18
     b4c:	f0 01       	movw	r30, r0
     b4e:	72 9f       	mul	r23, r18
     b50:	bb 27       	eor	r27, r27
     b52:	f0 0d       	add	r31, r0
     b54:	b1 1d       	adc	r27, r1
     b56:	63 9f       	mul	r22, r19
     b58:	aa 27       	eor	r26, r26
     b5a:	f0 0d       	add	r31, r0
     b5c:	b1 1d       	adc	r27, r1
     b5e:	aa 1f       	adc	r26, r26
     b60:	64 9f       	mul	r22, r20
     b62:	66 27       	eor	r22, r22
     b64:	b0 0d       	add	r27, r0
     b66:	a1 1d       	adc	r26, r1
     b68:	66 1f       	adc	r22, r22
     b6a:	82 9f       	mul	r24, r18
     b6c:	22 27       	eor	r18, r18
     b6e:	b0 0d       	add	r27, r0
     b70:	a1 1d       	adc	r26, r1
     b72:	62 1f       	adc	r22, r18
     b74:	73 9f       	mul	r23, r19
     b76:	b0 0d       	add	r27, r0
     b78:	a1 1d       	adc	r26, r1
     b7a:	62 1f       	adc	r22, r18
     b7c:	83 9f       	mul	r24, r19
     b7e:	a0 0d       	add	r26, r0
     b80:	61 1d       	adc	r22, r1
     b82:	22 1f       	adc	r18, r18
     b84:	74 9f       	mul	r23, r20
     b86:	33 27       	eor	r19, r19
     b88:	a0 0d       	add	r26, r0
     b8a:	61 1d       	adc	r22, r1
     b8c:	23 1f       	adc	r18, r19
     b8e:	84 9f       	mul	r24, r20
     b90:	60 0d       	add	r22, r0
     b92:	21 1d       	adc	r18, r1
     b94:	82 2f       	mov	r24, r18
     b96:	76 2f       	mov	r23, r22
     b98:	6a 2f       	mov	r22, r26
     b9a:	11 24       	eor	r1, r1
     b9c:	9f 57       	subi	r25, 0x7F	; 127
     b9e:	50 40       	sbci	r21, 0x00	; 0
     ba0:	9a f0       	brmi	.+38     	; 0xbc8 <__mulsf3_pse+0x88>
     ba2:	f1 f0       	breq	.+60     	; 0xbe0 <__mulsf3_pse+0xa0>
     ba4:	88 23       	and	r24, r24
     ba6:	4a f0       	brmi	.+18     	; 0xbba <__mulsf3_pse+0x7a>
     ba8:	ee 0f       	add	r30, r30
     baa:	ff 1f       	adc	r31, r31
     bac:	bb 1f       	adc	r27, r27
     bae:	66 1f       	adc	r22, r22
     bb0:	77 1f       	adc	r23, r23
     bb2:	88 1f       	adc	r24, r24
     bb4:	91 50       	subi	r25, 0x01	; 1
     bb6:	50 40       	sbci	r21, 0x00	; 0
     bb8:	a9 f7       	brne	.-22     	; 0xba4 <__mulsf3_pse+0x64>
     bba:	9e 3f       	cpi	r25, 0xFE	; 254
     bbc:	51 05       	cpc	r21, r1
     bbe:	80 f0       	brcs	.+32     	; 0xbe0 <__mulsf3_pse+0xa0>
     bc0:	0c 94 39 05 	jmp	0xa72	; 0xa72 <__fp_inf>
     bc4:	0c 94 84 05 	jmp	0xb08	; 0xb08 <__fp_szero>
     bc8:	5f 3f       	cpi	r21, 0xFF	; 255
     bca:	e4 f3       	brlt	.-8      	; 0xbc4 <__mulsf3_pse+0x84>
     bcc:	98 3e       	cpi	r25, 0xE8	; 232
     bce:	d4 f3       	brlt	.-12     	; 0xbc4 <__mulsf3_pse+0x84>
     bd0:	86 95       	lsr	r24
     bd2:	77 95       	ror	r23
     bd4:	67 95       	ror	r22
     bd6:	b7 95       	ror	r27
     bd8:	f7 95       	ror	r31
     bda:	e7 95       	ror	r30
     bdc:	9f 5f       	subi	r25, 0xFF	; 255
     bde:	c1 f7       	brne	.-16     	; 0xbd0 <__mulsf3_pse+0x90>
     be0:	fe 2b       	or	r31, r30
     be2:	88 0f       	add	r24, r24
     be4:	91 1d       	adc	r25, r1
     be6:	96 95       	lsr	r25
     be8:	87 95       	ror	r24
     bea:	97 f9       	bld	r25, 7
     bec:	08 95       	ret

00000bee <__tablejump2__>:
     bee:	ee 0f       	add	r30, r30
     bf0:	ff 1f       	adc	r31, r31
     bf2:	05 90       	lpm	r0, Z+
     bf4:	f4 91       	lpm	r31, Z
     bf6:	e0 2d       	mov	r30, r0
     bf8:	09 94       	ijmp

00000bfa <sprintf>:
     bfa:	ae e0       	ldi	r26, 0x0E	; 14
     bfc:	b0 e0       	ldi	r27, 0x00	; 0
     bfe:	e3 e0       	ldi	r30, 0x03	; 3
     c00:	f6 e0       	ldi	r31, 0x06	; 6
     c02:	0c 94 be 08 	jmp	0x117c	; 0x117c <__prologue_saves__+0x1c>
     c06:	0d 89       	ldd	r16, Y+21	; 0x15
     c08:	1e 89       	ldd	r17, Y+22	; 0x16
     c0a:	86 e0       	ldi	r24, 0x06	; 6
     c0c:	8c 83       	std	Y+4, r24	; 0x04
     c0e:	1a 83       	std	Y+2, r17	; 0x02
     c10:	09 83       	std	Y+1, r16	; 0x01
     c12:	8f ef       	ldi	r24, 0xFF	; 255
     c14:	9f e7       	ldi	r25, 0x7F	; 127
     c16:	9e 83       	std	Y+6, r25	; 0x06
     c18:	8d 83       	std	Y+5, r24	; 0x05
     c1a:	ae 01       	movw	r20, r28
     c1c:	47 5e       	subi	r20, 0xE7	; 231
     c1e:	5f 4f       	sbci	r21, 0xFF	; 255
     c20:	6f 89       	ldd	r22, Y+23	; 0x17
     c22:	78 8d       	ldd	r23, Y+24	; 0x18
     c24:	ce 01       	movw	r24, r28
     c26:	01 96       	adiw	r24, 0x01	; 1
     c28:	0e 94 1f 06 	call	0xc3e	; 0xc3e <vfprintf>
     c2c:	ef 81       	ldd	r30, Y+7	; 0x07
     c2e:	f8 85       	ldd	r31, Y+8	; 0x08
     c30:	e0 0f       	add	r30, r16
     c32:	f1 1f       	adc	r31, r17
     c34:	10 82       	st	Z, r1
     c36:	2e 96       	adiw	r28, 0x0e	; 14
     c38:	e4 e0       	ldi	r30, 0x04	; 4
     c3a:	0c 94 da 08 	jmp	0x11b4	; 0x11b4 <__epilogue_restores__+0x1c>

00000c3e <vfprintf>:
     c3e:	ab e0       	ldi	r26, 0x0B	; 11
     c40:	b0 e0       	ldi	r27, 0x00	; 0
     c42:	e5 e2       	ldi	r30, 0x25	; 37
     c44:	f6 e0       	ldi	r31, 0x06	; 6
     c46:	0c 94 b0 08 	jmp	0x1160	; 0x1160 <__prologue_saves__>
     c4a:	6c 01       	movw	r12, r24
     c4c:	7b 01       	movw	r14, r22
     c4e:	8a 01       	movw	r16, r20
     c50:	fc 01       	movw	r30, r24
     c52:	17 82       	std	Z+7, r1	; 0x07
     c54:	16 82       	std	Z+6, r1	; 0x06
     c56:	83 81       	ldd	r24, Z+3	; 0x03
     c58:	81 ff       	sbrs	r24, 1
     c5a:	cc c1       	rjmp	.+920    	; 0xff4 <vfprintf+0x3b6>
     c5c:	ce 01       	movw	r24, r28
     c5e:	01 96       	adiw	r24, 0x01	; 1
     c60:	3c 01       	movw	r6, r24
     c62:	f6 01       	movw	r30, r12
     c64:	93 81       	ldd	r25, Z+3	; 0x03
     c66:	f7 01       	movw	r30, r14
     c68:	93 fd       	sbrc	r25, 3
     c6a:	85 91       	lpm	r24, Z+
     c6c:	93 ff       	sbrs	r25, 3
     c6e:	81 91       	ld	r24, Z+
     c70:	7f 01       	movw	r14, r30
     c72:	88 23       	and	r24, r24
     c74:	09 f4       	brne	.+2      	; 0xc78 <vfprintf+0x3a>
     c76:	ba c1       	rjmp	.+884    	; 0xfec <vfprintf+0x3ae>
     c78:	85 32       	cpi	r24, 0x25	; 37
     c7a:	39 f4       	brne	.+14     	; 0xc8a <vfprintf+0x4c>
     c7c:	93 fd       	sbrc	r25, 3
     c7e:	85 91       	lpm	r24, Z+
     c80:	93 ff       	sbrs	r25, 3
     c82:	81 91       	ld	r24, Z+
     c84:	7f 01       	movw	r14, r30
     c86:	85 32       	cpi	r24, 0x25	; 37
     c88:	29 f4       	brne	.+10     	; 0xc94 <vfprintf+0x56>
     c8a:	b6 01       	movw	r22, r12
     c8c:	90 e0       	ldi	r25, 0x00	; 0
     c8e:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     c92:	e7 cf       	rjmp	.-50     	; 0xc62 <vfprintf+0x24>
     c94:	91 2c       	mov	r9, r1
     c96:	21 2c       	mov	r2, r1
     c98:	31 2c       	mov	r3, r1
     c9a:	ff e1       	ldi	r31, 0x1F	; 31
     c9c:	f3 15       	cp	r31, r3
     c9e:	d8 f0       	brcs	.+54     	; 0xcd6 <vfprintf+0x98>
     ca0:	8b 32       	cpi	r24, 0x2B	; 43
     ca2:	79 f0       	breq	.+30     	; 0xcc2 <vfprintf+0x84>
     ca4:	38 f4       	brcc	.+14     	; 0xcb4 <vfprintf+0x76>
     ca6:	80 32       	cpi	r24, 0x20	; 32
     ca8:	79 f0       	breq	.+30     	; 0xcc8 <vfprintf+0x8a>
     caa:	83 32       	cpi	r24, 0x23	; 35
     cac:	a1 f4       	brne	.+40     	; 0xcd6 <vfprintf+0x98>
     cae:	23 2d       	mov	r18, r3
     cb0:	20 61       	ori	r18, 0x10	; 16
     cb2:	1d c0       	rjmp	.+58     	; 0xcee <vfprintf+0xb0>
     cb4:	8d 32       	cpi	r24, 0x2D	; 45
     cb6:	61 f0       	breq	.+24     	; 0xcd0 <vfprintf+0x92>
     cb8:	80 33       	cpi	r24, 0x30	; 48
     cba:	69 f4       	brne	.+26     	; 0xcd6 <vfprintf+0x98>
     cbc:	23 2d       	mov	r18, r3
     cbe:	21 60       	ori	r18, 0x01	; 1
     cc0:	16 c0       	rjmp	.+44     	; 0xcee <vfprintf+0xb0>
     cc2:	83 2d       	mov	r24, r3
     cc4:	82 60       	ori	r24, 0x02	; 2
     cc6:	38 2e       	mov	r3, r24
     cc8:	e3 2d       	mov	r30, r3
     cca:	e4 60       	ori	r30, 0x04	; 4
     ccc:	3e 2e       	mov	r3, r30
     cce:	2a c0       	rjmp	.+84     	; 0xd24 <vfprintf+0xe6>
     cd0:	f3 2d       	mov	r31, r3
     cd2:	f8 60       	ori	r31, 0x08	; 8
     cd4:	1d c0       	rjmp	.+58     	; 0xd10 <vfprintf+0xd2>
     cd6:	37 fc       	sbrc	r3, 7
     cd8:	2d c0       	rjmp	.+90     	; 0xd34 <vfprintf+0xf6>
     cda:	20 ed       	ldi	r18, 0xD0	; 208
     cdc:	28 0f       	add	r18, r24
     cde:	2a 30       	cpi	r18, 0x0A	; 10
     ce0:	40 f0       	brcs	.+16     	; 0xcf2 <vfprintf+0xb4>
     ce2:	8e 32       	cpi	r24, 0x2E	; 46
     ce4:	b9 f4       	brne	.+46     	; 0xd14 <vfprintf+0xd6>
     ce6:	36 fc       	sbrc	r3, 6
     ce8:	81 c1       	rjmp	.+770    	; 0xfec <vfprintf+0x3ae>
     cea:	23 2d       	mov	r18, r3
     cec:	20 64       	ori	r18, 0x40	; 64
     cee:	32 2e       	mov	r3, r18
     cf0:	19 c0       	rjmp	.+50     	; 0xd24 <vfprintf+0xe6>
     cf2:	36 fe       	sbrs	r3, 6
     cf4:	06 c0       	rjmp	.+12     	; 0xd02 <vfprintf+0xc4>
     cf6:	8a e0       	ldi	r24, 0x0A	; 10
     cf8:	98 9e       	mul	r9, r24
     cfa:	20 0d       	add	r18, r0
     cfc:	11 24       	eor	r1, r1
     cfe:	92 2e       	mov	r9, r18
     d00:	11 c0       	rjmp	.+34     	; 0xd24 <vfprintf+0xe6>
     d02:	ea e0       	ldi	r30, 0x0A	; 10
     d04:	2e 9e       	mul	r2, r30
     d06:	20 0d       	add	r18, r0
     d08:	11 24       	eor	r1, r1
     d0a:	22 2e       	mov	r2, r18
     d0c:	f3 2d       	mov	r31, r3
     d0e:	f0 62       	ori	r31, 0x20	; 32
     d10:	3f 2e       	mov	r3, r31
     d12:	08 c0       	rjmp	.+16     	; 0xd24 <vfprintf+0xe6>
     d14:	8c 36       	cpi	r24, 0x6C	; 108
     d16:	21 f4       	brne	.+8      	; 0xd20 <vfprintf+0xe2>
     d18:	83 2d       	mov	r24, r3
     d1a:	80 68       	ori	r24, 0x80	; 128
     d1c:	38 2e       	mov	r3, r24
     d1e:	02 c0       	rjmp	.+4      	; 0xd24 <vfprintf+0xe6>
     d20:	88 36       	cpi	r24, 0x68	; 104
     d22:	41 f4       	brne	.+16     	; 0xd34 <vfprintf+0xf6>
     d24:	f7 01       	movw	r30, r14
     d26:	93 fd       	sbrc	r25, 3
     d28:	85 91       	lpm	r24, Z+
     d2a:	93 ff       	sbrs	r25, 3
     d2c:	81 91       	ld	r24, Z+
     d2e:	7f 01       	movw	r14, r30
     d30:	81 11       	cpse	r24, r1
     d32:	b3 cf       	rjmp	.-154    	; 0xc9a <vfprintf+0x5c>
     d34:	98 2f       	mov	r25, r24
     d36:	9f 7d       	andi	r25, 0xDF	; 223
     d38:	95 54       	subi	r25, 0x45	; 69
     d3a:	93 30       	cpi	r25, 0x03	; 3
     d3c:	28 f4       	brcc	.+10     	; 0xd48 <vfprintf+0x10a>
     d3e:	0c 5f       	subi	r16, 0xFC	; 252
     d40:	1f 4f       	sbci	r17, 0xFF	; 255
     d42:	9f e3       	ldi	r25, 0x3F	; 63
     d44:	99 83       	std	Y+1, r25	; 0x01
     d46:	0d c0       	rjmp	.+26     	; 0xd62 <vfprintf+0x124>
     d48:	83 36       	cpi	r24, 0x63	; 99
     d4a:	31 f0       	breq	.+12     	; 0xd58 <vfprintf+0x11a>
     d4c:	83 37       	cpi	r24, 0x73	; 115
     d4e:	71 f0       	breq	.+28     	; 0xd6c <vfprintf+0x12e>
     d50:	83 35       	cpi	r24, 0x53	; 83
     d52:	09 f0       	breq	.+2      	; 0xd56 <vfprintf+0x118>
     d54:	59 c0       	rjmp	.+178    	; 0xe08 <vfprintf+0x1ca>
     d56:	21 c0       	rjmp	.+66     	; 0xd9a <vfprintf+0x15c>
     d58:	f8 01       	movw	r30, r16
     d5a:	80 81       	ld	r24, Z
     d5c:	89 83       	std	Y+1, r24	; 0x01
     d5e:	0e 5f       	subi	r16, 0xFE	; 254
     d60:	1f 4f       	sbci	r17, 0xFF	; 255
     d62:	88 24       	eor	r8, r8
     d64:	83 94       	inc	r8
     d66:	91 2c       	mov	r9, r1
     d68:	53 01       	movw	r10, r6
     d6a:	13 c0       	rjmp	.+38     	; 0xd92 <vfprintf+0x154>
     d6c:	28 01       	movw	r4, r16
     d6e:	f2 e0       	ldi	r31, 0x02	; 2
     d70:	4f 0e       	add	r4, r31
     d72:	51 1c       	adc	r5, r1
     d74:	f8 01       	movw	r30, r16
     d76:	a0 80       	ld	r10, Z
     d78:	b1 80       	ldd	r11, Z+1	; 0x01
     d7a:	36 fe       	sbrs	r3, 6
     d7c:	03 c0       	rjmp	.+6      	; 0xd84 <vfprintf+0x146>
     d7e:	69 2d       	mov	r22, r9
     d80:	70 e0       	ldi	r23, 0x00	; 0
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <vfprintf+0x14a>
     d84:	6f ef       	ldi	r22, 0xFF	; 255
     d86:	7f ef       	ldi	r23, 0xFF	; 255
     d88:	c5 01       	movw	r24, r10
     d8a:	0e 94 0b 08 	call	0x1016	; 0x1016 <strnlen>
     d8e:	4c 01       	movw	r8, r24
     d90:	82 01       	movw	r16, r4
     d92:	f3 2d       	mov	r31, r3
     d94:	ff 77       	andi	r31, 0x7F	; 127
     d96:	3f 2e       	mov	r3, r31
     d98:	16 c0       	rjmp	.+44     	; 0xdc6 <vfprintf+0x188>
     d9a:	28 01       	movw	r4, r16
     d9c:	22 e0       	ldi	r18, 0x02	; 2
     d9e:	42 0e       	add	r4, r18
     da0:	51 1c       	adc	r5, r1
     da2:	f8 01       	movw	r30, r16
     da4:	a0 80       	ld	r10, Z
     da6:	b1 80       	ldd	r11, Z+1	; 0x01
     da8:	36 fe       	sbrs	r3, 6
     daa:	03 c0       	rjmp	.+6      	; 0xdb2 <vfprintf+0x174>
     dac:	69 2d       	mov	r22, r9
     dae:	70 e0       	ldi	r23, 0x00	; 0
     db0:	02 c0       	rjmp	.+4      	; 0xdb6 <vfprintf+0x178>
     db2:	6f ef       	ldi	r22, 0xFF	; 255
     db4:	7f ef       	ldi	r23, 0xFF	; 255
     db6:	c5 01       	movw	r24, r10
     db8:	0e 94 00 08 	call	0x1000	; 0x1000 <strnlen_P>
     dbc:	4c 01       	movw	r8, r24
     dbe:	f3 2d       	mov	r31, r3
     dc0:	f0 68       	ori	r31, 0x80	; 128
     dc2:	3f 2e       	mov	r3, r31
     dc4:	82 01       	movw	r16, r4
     dc6:	33 fc       	sbrc	r3, 3
     dc8:	1b c0       	rjmp	.+54     	; 0xe00 <vfprintf+0x1c2>
     dca:	82 2d       	mov	r24, r2
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	88 16       	cp	r8, r24
     dd0:	99 06       	cpc	r9, r25
     dd2:	b0 f4       	brcc	.+44     	; 0xe00 <vfprintf+0x1c2>
     dd4:	b6 01       	movw	r22, r12
     dd6:	80 e2       	ldi	r24, 0x20	; 32
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     dde:	2a 94       	dec	r2
     de0:	f4 cf       	rjmp	.-24     	; 0xdca <vfprintf+0x18c>
     de2:	f5 01       	movw	r30, r10
     de4:	37 fc       	sbrc	r3, 7
     de6:	85 91       	lpm	r24, Z+
     de8:	37 fe       	sbrs	r3, 7
     dea:	81 91       	ld	r24, Z+
     dec:	5f 01       	movw	r10, r30
     dee:	b6 01       	movw	r22, r12
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     df6:	21 10       	cpse	r2, r1
     df8:	2a 94       	dec	r2
     dfa:	21 e0       	ldi	r18, 0x01	; 1
     dfc:	82 1a       	sub	r8, r18
     dfe:	91 08       	sbc	r9, r1
     e00:	81 14       	cp	r8, r1
     e02:	91 04       	cpc	r9, r1
     e04:	71 f7       	brne	.-36     	; 0xde2 <vfprintf+0x1a4>
     e06:	e8 c0       	rjmp	.+464    	; 0xfd8 <vfprintf+0x39a>
     e08:	84 36       	cpi	r24, 0x64	; 100
     e0a:	11 f0       	breq	.+4      	; 0xe10 <vfprintf+0x1d2>
     e0c:	89 36       	cpi	r24, 0x69	; 105
     e0e:	41 f5       	brne	.+80     	; 0xe60 <vfprintf+0x222>
     e10:	f8 01       	movw	r30, r16
     e12:	37 fe       	sbrs	r3, 7
     e14:	07 c0       	rjmp	.+14     	; 0xe24 <vfprintf+0x1e6>
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	93 81       	ldd	r25, Z+3	; 0x03
     e1e:	0c 5f       	subi	r16, 0xFC	; 252
     e20:	1f 4f       	sbci	r17, 0xFF	; 255
     e22:	08 c0       	rjmp	.+16     	; 0xe34 <vfprintf+0x1f6>
     e24:	60 81       	ld	r22, Z
     e26:	71 81       	ldd	r23, Z+1	; 0x01
     e28:	07 2e       	mov	r0, r23
     e2a:	00 0c       	add	r0, r0
     e2c:	88 0b       	sbc	r24, r24
     e2e:	99 0b       	sbc	r25, r25
     e30:	0e 5f       	subi	r16, 0xFE	; 254
     e32:	1f 4f       	sbci	r17, 0xFF	; 255
     e34:	f3 2d       	mov	r31, r3
     e36:	ff 76       	andi	r31, 0x6F	; 111
     e38:	3f 2e       	mov	r3, r31
     e3a:	97 ff       	sbrs	r25, 7
     e3c:	09 c0       	rjmp	.+18     	; 0xe50 <vfprintf+0x212>
     e3e:	90 95       	com	r25
     e40:	80 95       	com	r24
     e42:	70 95       	com	r23
     e44:	61 95       	neg	r22
     e46:	7f 4f       	sbci	r23, 0xFF	; 255
     e48:	8f 4f       	sbci	r24, 0xFF	; 255
     e4a:	9f 4f       	sbci	r25, 0xFF	; 255
     e4c:	f0 68       	ori	r31, 0x80	; 128
     e4e:	3f 2e       	mov	r3, r31
     e50:	2a e0       	ldi	r18, 0x0A	; 10
     e52:	30 e0       	ldi	r19, 0x00	; 0
     e54:	a3 01       	movw	r20, r6
     e56:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__ultoa_invert>
     e5a:	88 2e       	mov	r8, r24
     e5c:	86 18       	sub	r8, r6
     e5e:	45 c0       	rjmp	.+138    	; 0xeea <vfprintf+0x2ac>
     e60:	85 37       	cpi	r24, 0x75	; 117
     e62:	31 f4       	brne	.+12     	; 0xe70 <vfprintf+0x232>
     e64:	23 2d       	mov	r18, r3
     e66:	2f 7e       	andi	r18, 0xEF	; 239
     e68:	b2 2e       	mov	r11, r18
     e6a:	2a e0       	ldi	r18, 0x0A	; 10
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	25 c0       	rjmp	.+74     	; 0xeba <vfprintf+0x27c>
     e70:	93 2d       	mov	r25, r3
     e72:	99 7f       	andi	r25, 0xF9	; 249
     e74:	b9 2e       	mov	r11, r25
     e76:	8f 36       	cpi	r24, 0x6F	; 111
     e78:	c1 f0       	breq	.+48     	; 0xeaa <vfprintf+0x26c>
     e7a:	18 f4       	brcc	.+6      	; 0xe82 <vfprintf+0x244>
     e7c:	88 35       	cpi	r24, 0x58	; 88
     e7e:	79 f0       	breq	.+30     	; 0xe9e <vfprintf+0x260>
     e80:	b5 c0       	rjmp	.+362    	; 0xfec <vfprintf+0x3ae>
     e82:	80 37       	cpi	r24, 0x70	; 112
     e84:	19 f0       	breq	.+6      	; 0xe8c <vfprintf+0x24e>
     e86:	88 37       	cpi	r24, 0x78	; 120
     e88:	21 f0       	breq	.+8      	; 0xe92 <vfprintf+0x254>
     e8a:	b0 c0       	rjmp	.+352    	; 0xfec <vfprintf+0x3ae>
     e8c:	e9 2f       	mov	r30, r25
     e8e:	e0 61       	ori	r30, 0x10	; 16
     e90:	be 2e       	mov	r11, r30
     e92:	b4 fe       	sbrs	r11, 4
     e94:	0d c0       	rjmp	.+26     	; 0xeb0 <vfprintf+0x272>
     e96:	fb 2d       	mov	r31, r11
     e98:	f4 60       	ori	r31, 0x04	; 4
     e9a:	bf 2e       	mov	r11, r31
     e9c:	09 c0       	rjmp	.+18     	; 0xeb0 <vfprintf+0x272>
     e9e:	34 fe       	sbrs	r3, 4
     ea0:	0a c0       	rjmp	.+20     	; 0xeb6 <vfprintf+0x278>
     ea2:	29 2f       	mov	r18, r25
     ea4:	26 60       	ori	r18, 0x06	; 6
     ea6:	b2 2e       	mov	r11, r18
     ea8:	06 c0       	rjmp	.+12     	; 0xeb6 <vfprintf+0x278>
     eaa:	28 e0       	ldi	r18, 0x08	; 8
     eac:	30 e0       	ldi	r19, 0x00	; 0
     eae:	05 c0       	rjmp	.+10     	; 0xeba <vfprintf+0x27c>
     eb0:	20 e1       	ldi	r18, 0x10	; 16
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	02 c0       	rjmp	.+4      	; 0xeba <vfprintf+0x27c>
     eb6:	20 e1       	ldi	r18, 0x10	; 16
     eb8:	32 e0       	ldi	r19, 0x02	; 2
     eba:	f8 01       	movw	r30, r16
     ebc:	b7 fe       	sbrs	r11, 7
     ebe:	07 c0       	rjmp	.+14     	; 0xece <vfprintf+0x290>
     ec0:	60 81       	ld	r22, Z
     ec2:	71 81       	ldd	r23, Z+1	; 0x01
     ec4:	82 81       	ldd	r24, Z+2	; 0x02
     ec6:	93 81       	ldd	r25, Z+3	; 0x03
     ec8:	0c 5f       	subi	r16, 0xFC	; 252
     eca:	1f 4f       	sbci	r17, 0xFF	; 255
     ecc:	06 c0       	rjmp	.+12     	; 0xeda <vfprintf+0x29c>
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	0e 5f       	subi	r16, 0xFE	; 254
     ed8:	1f 4f       	sbci	r17, 0xFF	; 255
     eda:	a3 01       	movw	r20, r6
     edc:	0e 94 52 08 	call	0x10a4	; 0x10a4 <__ultoa_invert>
     ee0:	88 2e       	mov	r8, r24
     ee2:	86 18       	sub	r8, r6
     ee4:	fb 2d       	mov	r31, r11
     ee6:	ff 77       	andi	r31, 0x7F	; 127
     ee8:	3f 2e       	mov	r3, r31
     eea:	36 fe       	sbrs	r3, 6
     eec:	0d c0       	rjmp	.+26     	; 0xf08 <vfprintf+0x2ca>
     eee:	23 2d       	mov	r18, r3
     ef0:	2e 7f       	andi	r18, 0xFE	; 254
     ef2:	a2 2e       	mov	r10, r18
     ef4:	89 14       	cp	r8, r9
     ef6:	58 f4       	brcc	.+22     	; 0xf0e <vfprintf+0x2d0>
     ef8:	34 fe       	sbrs	r3, 4
     efa:	0b c0       	rjmp	.+22     	; 0xf12 <vfprintf+0x2d4>
     efc:	32 fc       	sbrc	r3, 2
     efe:	09 c0       	rjmp	.+18     	; 0xf12 <vfprintf+0x2d4>
     f00:	83 2d       	mov	r24, r3
     f02:	8e 7e       	andi	r24, 0xEE	; 238
     f04:	a8 2e       	mov	r10, r24
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <vfprintf+0x2d4>
     f08:	b8 2c       	mov	r11, r8
     f0a:	a3 2c       	mov	r10, r3
     f0c:	03 c0       	rjmp	.+6      	; 0xf14 <vfprintf+0x2d6>
     f0e:	b8 2c       	mov	r11, r8
     f10:	01 c0       	rjmp	.+2      	; 0xf14 <vfprintf+0x2d6>
     f12:	b9 2c       	mov	r11, r9
     f14:	a4 fe       	sbrs	r10, 4
     f16:	0f c0       	rjmp	.+30     	; 0xf36 <vfprintf+0x2f8>
     f18:	fe 01       	movw	r30, r28
     f1a:	e8 0d       	add	r30, r8
     f1c:	f1 1d       	adc	r31, r1
     f1e:	80 81       	ld	r24, Z
     f20:	80 33       	cpi	r24, 0x30	; 48
     f22:	21 f4       	brne	.+8      	; 0xf2c <vfprintf+0x2ee>
     f24:	9a 2d       	mov	r25, r10
     f26:	99 7e       	andi	r25, 0xE9	; 233
     f28:	a9 2e       	mov	r10, r25
     f2a:	09 c0       	rjmp	.+18     	; 0xf3e <vfprintf+0x300>
     f2c:	a2 fe       	sbrs	r10, 2
     f2e:	06 c0       	rjmp	.+12     	; 0xf3c <vfprintf+0x2fe>
     f30:	b3 94       	inc	r11
     f32:	b3 94       	inc	r11
     f34:	04 c0       	rjmp	.+8      	; 0xf3e <vfprintf+0x300>
     f36:	8a 2d       	mov	r24, r10
     f38:	86 78       	andi	r24, 0x86	; 134
     f3a:	09 f0       	breq	.+2      	; 0xf3e <vfprintf+0x300>
     f3c:	b3 94       	inc	r11
     f3e:	a3 fc       	sbrc	r10, 3
     f40:	11 c0       	rjmp	.+34     	; 0xf64 <vfprintf+0x326>
     f42:	a0 fe       	sbrs	r10, 0
     f44:	06 c0       	rjmp	.+12     	; 0xf52 <vfprintf+0x314>
     f46:	b2 14       	cp	r11, r2
     f48:	88 f4       	brcc	.+34     	; 0xf6c <vfprintf+0x32e>
     f4a:	28 0c       	add	r2, r8
     f4c:	92 2c       	mov	r9, r2
     f4e:	9b 18       	sub	r9, r11
     f50:	0e c0       	rjmp	.+28     	; 0xf6e <vfprintf+0x330>
     f52:	b2 14       	cp	r11, r2
     f54:	60 f4       	brcc	.+24     	; 0xf6e <vfprintf+0x330>
     f56:	b6 01       	movw	r22, r12
     f58:	80 e2       	ldi	r24, 0x20	; 32
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     f60:	b3 94       	inc	r11
     f62:	f7 cf       	rjmp	.-18     	; 0xf52 <vfprintf+0x314>
     f64:	b2 14       	cp	r11, r2
     f66:	18 f4       	brcc	.+6      	; 0xf6e <vfprintf+0x330>
     f68:	2b 18       	sub	r2, r11
     f6a:	02 c0       	rjmp	.+4      	; 0xf70 <vfprintf+0x332>
     f6c:	98 2c       	mov	r9, r8
     f6e:	21 2c       	mov	r2, r1
     f70:	a4 fe       	sbrs	r10, 4
     f72:	10 c0       	rjmp	.+32     	; 0xf94 <vfprintf+0x356>
     f74:	b6 01       	movw	r22, r12
     f76:	80 e3       	ldi	r24, 0x30	; 48
     f78:	90 e0       	ldi	r25, 0x00	; 0
     f7a:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     f7e:	a2 fe       	sbrs	r10, 2
     f80:	17 c0       	rjmp	.+46     	; 0xfb0 <vfprintf+0x372>
     f82:	a1 fc       	sbrc	r10, 1
     f84:	03 c0       	rjmp	.+6      	; 0xf8c <vfprintf+0x34e>
     f86:	88 e7       	ldi	r24, 0x78	; 120
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <vfprintf+0x352>
     f8c:	88 e5       	ldi	r24, 0x58	; 88
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	b6 01       	movw	r22, r12
     f92:	0c c0       	rjmp	.+24     	; 0xfac <vfprintf+0x36e>
     f94:	8a 2d       	mov	r24, r10
     f96:	86 78       	andi	r24, 0x86	; 134
     f98:	59 f0       	breq	.+22     	; 0xfb0 <vfprintf+0x372>
     f9a:	a1 fe       	sbrs	r10, 1
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <vfprintf+0x364>
     f9e:	8b e2       	ldi	r24, 0x2B	; 43
     fa0:	01 c0       	rjmp	.+2      	; 0xfa4 <vfprintf+0x366>
     fa2:	80 e2       	ldi	r24, 0x20	; 32
     fa4:	a7 fc       	sbrc	r10, 7
     fa6:	8d e2       	ldi	r24, 0x2D	; 45
     fa8:	b6 01       	movw	r22, r12
     faa:	90 e0       	ldi	r25, 0x00	; 0
     fac:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     fb0:	89 14       	cp	r8, r9
     fb2:	38 f4       	brcc	.+14     	; 0xfc2 <vfprintf+0x384>
     fb4:	b6 01       	movw	r22, r12
     fb6:	80 e3       	ldi	r24, 0x30	; 48
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     fbe:	9a 94       	dec	r9
     fc0:	f7 cf       	rjmp	.-18     	; 0xfb0 <vfprintf+0x372>
     fc2:	8a 94       	dec	r8
     fc4:	f3 01       	movw	r30, r6
     fc6:	e8 0d       	add	r30, r8
     fc8:	f1 1d       	adc	r31, r1
     fca:	80 81       	ld	r24, Z
     fcc:	b6 01       	movw	r22, r12
     fce:	90 e0       	ldi	r25, 0x00	; 0
     fd0:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     fd4:	81 10       	cpse	r8, r1
     fd6:	f5 cf       	rjmp	.-22     	; 0xfc2 <vfprintf+0x384>
     fd8:	22 20       	and	r2, r2
     fda:	09 f4       	brne	.+2      	; 0xfde <vfprintf+0x3a0>
     fdc:	42 ce       	rjmp	.-892    	; 0xc62 <vfprintf+0x24>
     fde:	b6 01       	movw	r22, r12
     fe0:	80 e2       	ldi	r24, 0x20	; 32
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	0e 94 16 08 	call	0x102c	; 0x102c <fputc>
     fe8:	2a 94       	dec	r2
     fea:	f6 cf       	rjmp	.-20     	; 0xfd8 <vfprintf+0x39a>
     fec:	f6 01       	movw	r30, r12
     fee:	86 81       	ldd	r24, Z+6	; 0x06
     ff0:	97 81       	ldd	r25, Z+7	; 0x07
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x3ba>
     ff4:	8f ef       	ldi	r24, 0xFF	; 255
     ff6:	9f ef       	ldi	r25, 0xFF	; 255
     ff8:	2b 96       	adiw	r28, 0x0b	; 11
     ffa:	e2 e1       	ldi	r30, 0x12	; 18
     ffc:	0c 94 cc 08 	jmp	0x1198	; 0x1198 <__epilogue_restores__>

00001000 <strnlen_P>:
    1000:	fc 01       	movw	r30, r24
    1002:	05 90       	lpm	r0, Z+
    1004:	61 50       	subi	r22, 0x01	; 1
    1006:	70 40       	sbci	r23, 0x00	; 0
    1008:	01 10       	cpse	r0, r1
    100a:	d8 f7       	brcc	.-10     	; 0x1002 <strnlen_P+0x2>
    100c:	80 95       	com	r24
    100e:	90 95       	com	r25
    1010:	8e 0f       	add	r24, r30
    1012:	9f 1f       	adc	r25, r31
    1014:	08 95       	ret

00001016 <strnlen>:
    1016:	fc 01       	movw	r30, r24
    1018:	61 50       	subi	r22, 0x01	; 1
    101a:	70 40       	sbci	r23, 0x00	; 0
    101c:	01 90       	ld	r0, Z+
    101e:	01 10       	cpse	r0, r1
    1020:	d8 f7       	brcc	.-10     	; 0x1018 <strnlen+0x2>
    1022:	80 95       	com	r24
    1024:	90 95       	com	r25
    1026:	8e 0f       	add	r24, r30
    1028:	9f 1f       	adc	r25, r31
    102a:	08 95       	ret

0000102c <fputc>:
    102c:	0f 93       	push	r16
    102e:	1f 93       	push	r17
    1030:	cf 93       	push	r28
    1032:	df 93       	push	r29
    1034:	fb 01       	movw	r30, r22
    1036:	23 81       	ldd	r18, Z+3	; 0x03
    1038:	21 fd       	sbrc	r18, 1
    103a:	03 c0       	rjmp	.+6      	; 0x1042 <fputc+0x16>
    103c:	8f ef       	ldi	r24, 0xFF	; 255
    103e:	9f ef       	ldi	r25, 0xFF	; 255
    1040:	2c c0       	rjmp	.+88     	; 0x109a <fputc+0x6e>
    1042:	22 ff       	sbrs	r18, 2
    1044:	16 c0       	rjmp	.+44     	; 0x1072 <fputc+0x46>
    1046:	46 81       	ldd	r20, Z+6	; 0x06
    1048:	57 81       	ldd	r21, Z+7	; 0x07
    104a:	24 81       	ldd	r18, Z+4	; 0x04
    104c:	35 81       	ldd	r19, Z+5	; 0x05
    104e:	42 17       	cp	r20, r18
    1050:	53 07       	cpc	r21, r19
    1052:	44 f4       	brge	.+16     	; 0x1064 <fputc+0x38>
    1054:	a0 81       	ld	r26, Z
    1056:	b1 81       	ldd	r27, Z+1	; 0x01
    1058:	9d 01       	movw	r18, r26
    105a:	2f 5f       	subi	r18, 0xFF	; 255
    105c:	3f 4f       	sbci	r19, 0xFF	; 255
    105e:	31 83       	std	Z+1, r19	; 0x01
    1060:	20 83       	st	Z, r18
    1062:	8c 93       	st	X, r24
    1064:	26 81       	ldd	r18, Z+6	; 0x06
    1066:	37 81       	ldd	r19, Z+7	; 0x07
    1068:	2f 5f       	subi	r18, 0xFF	; 255
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	37 83       	std	Z+7, r19	; 0x07
    106e:	26 83       	std	Z+6, r18	; 0x06
    1070:	14 c0       	rjmp	.+40     	; 0x109a <fputc+0x6e>
    1072:	8b 01       	movw	r16, r22
    1074:	ec 01       	movw	r28, r24
    1076:	fb 01       	movw	r30, r22
    1078:	00 84       	ldd	r0, Z+8	; 0x08
    107a:	f1 85       	ldd	r31, Z+9	; 0x09
    107c:	e0 2d       	mov	r30, r0
    107e:	09 95       	icall
    1080:	89 2b       	or	r24, r25
    1082:	e1 f6       	brne	.-72     	; 0x103c <fputc+0x10>
    1084:	d8 01       	movw	r26, r16
    1086:	16 96       	adiw	r26, 0x06	; 6
    1088:	8d 91       	ld	r24, X+
    108a:	9c 91       	ld	r25, X
    108c:	17 97       	sbiw	r26, 0x07	; 7
    108e:	01 96       	adiw	r24, 0x01	; 1
    1090:	17 96       	adiw	r26, 0x07	; 7
    1092:	9c 93       	st	X, r25
    1094:	8e 93       	st	-X, r24
    1096:	16 97       	sbiw	r26, 0x06	; 6
    1098:	ce 01       	movw	r24, r28
    109a:	df 91       	pop	r29
    109c:	cf 91       	pop	r28
    109e:	1f 91       	pop	r17
    10a0:	0f 91       	pop	r16
    10a2:	08 95       	ret

000010a4 <__ultoa_invert>:
    10a4:	fa 01       	movw	r30, r20
    10a6:	aa 27       	eor	r26, r26
    10a8:	28 30       	cpi	r18, 0x08	; 8
    10aa:	51 f1       	breq	.+84     	; 0x1100 <__ultoa_invert+0x5c>
    10ac:	20 31       	cpi	r18, 0x10	; 16
    10ae:	81 f1       	breq	.+96     	; 0x1110 <__ultoa_invert+0x6c>
    10b0:	e8 94       	clt
    10b2:	6f 93       	push	r22
    10b4:	6e 7f       	andi	r22, 0xFE	; 254
    10b6:	6e 5f       	subi	r22, 0xFE	; 254
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	af 4f       	sbci	r26, 0xFF	; 255
    10c0:	b1 e0       	ldi	r27, 0x01	; 1
    10c2:	3e d0       	rcall	.+124    	; 0x1140 <__ultoa_invert+0x9c>
    10c4:	b4 e0       	ldi	r27, 0x04	; 4
    10c6:	3c d0       	rcall	.+120    	; 0x1140 <__ultoa_invert+0x9c>
    10c8:	67 0f       	add	r22, r23
    10ca:	78 1f       	adc	r23, r24
    10cc:	89 1f       	adc	r24, r25
    10ce:	9a 1f       	adc	r25, r26
    10d0:	a1 1d       	adc	r26, r1
    10d2:	68 0f       	add	r22, r24
    10d4:	79 1f       	adc	r23, r25
    10d6:	8a 1f       	adc	r24, r26
    10d8:	91 1d       	adc	r25, r1
    10da:	a1 1d       	adc	r26, r1
    10dc:	6a 0f       	add	r22, r26
    10de:	71 1d       	adc	r23, r1
    10e0:	81 1d       	adc	r24, r1
    10e2:	91 1d       	adc	r25, r1
    10e4:	a1 1d       	adc	r26, r1
    10e6:	20 d0       	rcall	.+64     	; 0x1128 <__ultoa_invert+0x84>
    10e8:	09 f4       	brne	.+2      	; 0x10ec <__ultoa_invert+0x48>
    10ea:	68 94       	set
    10ec:	3f 91       	pop	r19
    10ee:	2a e0       	ldi	r18, 0x0A	; 10
    10f0:	26 9f       	mul	r18, r22
    10f2:	11 24       	eor	r1, r1
    10f4:	30 19       	sub	r19, r0
    10f6:	30 5d       	subi	r19, 0xD0	; 208
    10f8:	31 93       	st	Z+, r19
    10fa:	de f6       	brtc	.-74     	; 0x10b2 <__ultoa_invert+0xe>
    10fc:	cf 01       	movw	r24, r30
    10fe:	08 95       	ret
    1100:	46 2f       	mov	r20, r22
    1102:	47 70       	andi	r20, 0x07	; 7
    1104:	40 5d       	subi	r20, 0xD0	; 208
    1106:	41 93       	st	Z+, r20
    1108:	b3 e0       	ldi	r27, 0x03	; 3
    110a:	0f d0       	rcall	.+30     	; 0x112a <__ultoa_invert+0x86>
    110c:	c9 f7       	brne	.-14     	; 0x1100 <__ultoa_invert+0x5c>
    110e:	f6 cf       	rjmp	.-20     	; 0x10fc <__ultoa_invert+0x58>
    1110:	46 2f       	mov	r20, r22
    1112:	4f 70       	andi	r20, 0x0F	; 15
    1114:	40 5d       	subi	r20, 0xD0	; 208
    1116:	4a 33       	cpi	r20, 0x3A	; 58
    1118:	18 f0       	brcs	.+6      	; 0x1120 <__ultoa_invert+0x7c>
    111a:	49 5d       	subi	r20, 0xD9	; 217
    111c:	31 fd       	sbrc	r19, 1
    111e:	40 52       	subi	r20, 0x20	; 32
    1120:	41 93       	st	Z+, r20
    1122:	02 d0       	rcall	.+4      	; 0x1128 <__ultoa_invert+0x84>
    1124:	a9 f7       	brne	.-22     	; 0x1110 <__ultoa_invert+0x6c>
    1126:	ea cf       	rjmp	.-44     	; 0x10fc <__ultoa_invert+0x58>
    1128:	b4 e0       	ldi	r27, 0x04	; 4
    112a:	a6 95       	lsr	r26
    112c:	97 95       	ror	r25
    112e:	87 95       	ror	r24
    1130:	77 95       	ror	r23
    1132:	67 95       	ror	r22
    1134:	ba 95       	dec	r27
    1136:	c9 f7       	brne	.-14     	; 0x112a <__ultoa_invert+0x86>
    1138:	00 97       	sbiw	r24, 0x00	; 0
    113a:	61 05       	cpc	r22, r1
    113c:	71 05       	cpc	r23, r1
    113e:	08 95       	ret
    1140:	9b 01       	movw	r18, r22
    1142:	ac 01       	movw	r20, r24
    1144:	0a 2e       	mov	r0, r26
    1146:	06 94       	lsr	r0
    1148:	57 95       	ror	r21
    114a:	47 95       	ror	r20
    114c:	37 95       	ror	r19
    114e:	27 95       	ror	r18
    1150:	ba 95       	dec	r27
    1152:	c9 f7       	brne	.-14     	; 0x1146 <__ultoa_invert+0xa2>
    1154:	62 0f       	add	r22, r18
    1156:	73 1f       	adc	r23, r19
    1158:	84 1f       	adc	r24, r20
    115a:	95 1f       	adc	r25, r21
    115c:	a0 1d       	adc	r26, r0
    115e:	08 95       	ret

00001160 <__prologue_saves__>:
    1160:	2f 92       	push	r2
    1162:	3f 92       	push	r3
    1164:	4f 92       	push	r4
    1166:	5f 92       	push	r5
    1168:	6f 92       	push	r6
    116a:	7f 92       	push	r7
    116c:	8f 92       	push	r8
    116e:	9f 92       	push	r9
    1170:	af 92       	push	r10
    1172:	bf 92       	push	r11
    1174:	cf 92       	push	r12
    1176:	df 92       	push	r13
    1178:	ef 92       	push	r14
    117a:	ff 92       	push	r15
    117c:	0f 93       	push	r16
    117e:	1f 93       	push	r17
    1180:	cf 93       	push	r28
    1182:	df 93       	push	r29
    1184:	cd b7       	in	r28, 0x3d	; 61
    1186:	de b7       	in	r29, 0x3e	; 62
    1188:	ca 1b       	sub	r28, r26
    118a:	db 0b       	sbc	r29, r27
    118c:	0f b6       	in	r0, 0x3f	; 63
    118e:	f8 94       	cli
    1190:	de bf       	out	0x3e, r29	; 62
    1192:	0f be       	out	0x3f, r0	; 63
    1194:	cd bf       	out	0x3d, r28	; 61
    1196:	09 94       	ijmp

00001198 <__epilogue_restores__>:
    1198:	2a 88       	ldd	r2, Y+18	; 0x12
    119a:	39 88       	ldd	r3, Y+17	; 0x11
    119c:	48 88       	ldd	r4, Y+16	; 0x10
    119e:	5f 84       	ldd	r5, Y+15	; 0x0f
    11a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    11a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    11a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    11a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    11a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    11aa:	b9 84       	ldd	r11, Y+9	; 0x09
    11ac:	c8 84       	ldd	r12, Y+8	; 0x08
    11ae:	df 80       	ldd	r13, Y+7	; 0x07
    11b0:	ee 80       	ldd	r14, Y+6	; 0x06
    11b2:	fd 80       	ldd	r15, Y+5	; 0x05
    11b4:	0c 81       	ldd	r16, Y+4	; 0x04
    11b6:	1b 81       	ldd	r17, Y+3	; 0x03
    11b8:	aa 81       	ldd	r26, Y+2	; 0x02
    11ba:	b9 81       	ldd	r27, Y+1	; 0x01
    11bc:	ce 0f       	add	r28, r30
    11be:	d1 1d       	adc	r29, r1
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	ed 01       	movw	r28, r26
    11cc:	08 95       	ret

000011ce <_exit>:
    11ce:	f8 94       	cli

000011d0 <__stop_program>:
    11d0:	ff cf       	rjmp	.-2      	; 0x11d0 <__stop_program>
